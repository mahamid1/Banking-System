<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics4.Win.DataVisualization.Shared.v17.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Win.DataVisualization.Touch.Gesture">
            <summary>
            Constants which identify the supported touch gestures
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.None">
            <summary>
            No gesture.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.Zoom">
            <summary>
            The zoom/pinch gesture. This gesture occurs when the user
            makes contact with the touch surface with two fingers,
            and moves them toward each other (pinch) or farther apart
            (zoom).
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.Pan">
            <summary>
            The pan gesture. This gesture occurs when the user
            makes contact with the touch surface and drags a finger
            up/down or left/right. When the user loses contact with
            the touch surface, the scrolling continues, gradually
            decelerating. This is typically referred to as inertial
            panning.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.Rotate">
            <summary>
            The rotate gesture. This gesture occurs when the user
            holds one finger stationary on the touch surface while
            moving around that pivot point with a second finger.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.TwoFingerTap">
            <summary>
            The two-finger tap gesture. This gesture occurs when the user
            taps the touch surface with two fingers simultaneously, with
            the target defined as the midpoint between the two fingers.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.PressAndTap">
            <summary>
            The press and tap gesture. This gesture occurs when the user
            makes contact with the touch surface with one finger, and then
            taps with a second finger, while maintaining contact with the
            first finger.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.Gesture.PressAndHold">
            <summary>
            The press and hold gesture. This gesture occurs when the user
            makes contact with the touch surface and does not move or release
            the finger until a specified period of time has elapsed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureModes">
            <summary>
            Flagged enumeration which defines gesture modes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.None">
            <summary>
            No gesture modes.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.Zoom">
            <summary>
            The ZoomGesture event is enabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.Rotate">
            <summary>
            The RotateGesture event is enabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.PanNoInertia">
            <summary>
            The PanGesture event is enabled, but inertial panning is not enabled.
            Using this constant as opposed to the 'Pan' constant causes the
            PanGesture event to stop firing immediately upon the user's loss of
            contact with the touch surface.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.PanInertia">
            <summary>
            When combined with the 'PanNoInertia' constant, enables inertial panning.
            Note that this constant only has significance when combined with the
            'PanNoInertia' constant. Assigning this constant alone does not enable
            panning unless combined with the 'PanNoInertia' constant.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.Pan">
            <summary>
            The PanGesture event is enabled, as is inertial panning.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.PressAndTap">
            <summary>
            The PressAndTapGesture event is enabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.TwoFingerTap">
            <summary>
            The TwoFingerGesture event is enabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.PressAndHold">
            <summary>
            The PressAndHoldGesture event is enabled.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureModes.All">
            <summary>
            Combines all bitflags, enabling all gesture events.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureEventArgs">
            <summary>
            Base class for touch gesture-related event arguments.
            </summary>
            <seealso cref="T:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs">PanGestureEventArgs class</seealso>
            <seealso cref="T:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs">ZoomGestureEventArgs class</seealso>
            <seealso cref="T:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs">RotateGestureEventArgs class</seealso>
            <seealso cref="T:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs">PressAndTapGestureEventArgs class</seealso>
            <seealso cref="T:Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureEventArgs">TwoFingerTapGestureEventArgs class</seealso>
            <seealso cref="T:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs">PressAndHoldGestureEventArgs class</seealso>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureEventArgs.Gesture">
            <summary>
            Returns a constant which identifies the touch gesture that triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureEventArgs.Handled">
            <summary>
            Returns or sets a boolean value indicating whether the event has been handled.
            </summary>
            <remarks>
            <p class="body">
            To prevent the control's internal processing of the gesture, set the Handled property to true.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs">
            <summary>
            Contains information about the GestureQueryStatus event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs.Location">
            <summary>
            Returns the location of the touch point which triggered this event, expressed in client coordinates.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs.Mode">
            <summary>
            Returns or sets a value indicating which gestures will cause events to fire.
            </summary>
            <remarks>
            <p class="body">
            The GestureModes type is a flagged enumeration; as such, any combination of gesture
            modes can be allowed or blocked.
            </p>
            <p class="body">
            For example, to enable only panning and zooming, set the Mode property
            to the bitwise OR combination GestureModes.Pan | GestureModes.Zoom.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs.PressAndHoldDelay">
            <summary>
            Returns or sets a value indicating the amount of time, in milliseconds, that the
            user must hold a touch point stationary in order to trigger the PressAndHoldGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusHandler">
            <summary>
            Defines the signature of the handler for the GestureQueryStatus event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureStartingEventArgs">
            <summary>
            Contains information about the GestureStarting event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureStartingEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureStartingEventArgs.Location">
            <summary>
            Returns the location of the touch point at which the gesture started, expressed in client coordinates.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureStartingEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureStartingHandler">
            <summary>
            Defines the signature of the handler for the GestureStarting event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureCompletedEventArgs">
            <summary>
            Contains information about the GestureCompleted event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureCompletedEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureCompletedEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureCompletedEventArgs.Location">
            <summary>
            Returns the location of the touch point at which the gesture was completed, expressed in client coordinates.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureCompletedHandler">
            <summary>
            Defines the signature of the handler for the GestureCompleted event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs">
            <summary>
            Contains information about the PanGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.Location">
            <summary>
            Returns the location of the contact point at the time this event was fired.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.HorizontalInertia">
            <summary>
            Returns a vector which describes the horizontal inertia for this event.
            </summary>
            <remarks>
            <p class="body">
            Panning inertia refers to the deceleration in scrolling speed that occurs
            after the user loses contact with the touch surface.
            </p>
            <p class="body">
            <b>NOTE</b> that the magnitude of this value is driver-dependent.
            The sign of the value, which represents the direction of movement, is always
            negative when scrolling toward the right (viewport moves toward the left),
            and positive when scrolling toward the left (viewport moves toward the right).
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.VerticalInertia">VerticalInertia</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.VerticalInertia">
            <summary>
            Returns a vector which describes the vertical inertia for this event.
            </summary>
            <remarks>
            <p class="body">
            Panning inertia refers to the deceleration in scrolling speed that occurs
            after the user loses contact with the touch surface.
            </p>
            <p class="body">
            <b>NOTE</b> that the magnitude of this value is driver-dependent.
            The sign of the value, which represents the direction of movement, is always
            negative when scrolling downward (viewport moves up), and positive when scrolling
            upward (viewport moves down).
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.HorizontalInertia">HorizontalInertia</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.IsInertial">
            <summary>
            Returns a boolean value indicating whether this event was triggered by inertia.
            </summary>
            <remarks>
            <p class="body">
            Panning inertia refers to the deceleration in scrolling speed that occurs
            after the user loses contact with the touch surface.
            </p>
            <p class="body">
            Use the
            <see cref="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.HorizontalInertia">HorizontalInertia</see>
            and
            <see cref="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.VerticalInertia">VerticalInertia</see>
            properties to differentiate between inertia in the horizontal and vertical directions.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs.HorizontalInertia">HorizontalInertia</seealso>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.PanGestureHandler">
            <summary>
            Defines the signature of the handler for the PanGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs">
            <summary>
            Contains information about the ZoomGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs.Center">
            <summary>
            Returns the location of the point which lies midway between the two contact points for this gesture.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs.Distance">
            <summary>
            Returns the distance between the gesture's contact points for this event, expressed in pixels.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs.Origin">
            <summary>
            Returns the original contact point with the surface. Can be used to determine if the gesture was zoom or pinch.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.ZoomGestureHandler">
            <summary>
            Defines the signature of the handler for the ZoomGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs">
            <summary>
            Contains information about the RotateGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Pivot">
            <summary>
            Returns the touch point around which the rotation occurred for this gesture.
            </summary>
            <remarks>
            <p class="body">
            The pivot point represents the location of the finger which remains stationary.
            The pivot point defines the vertex for the gesture's
            <see cref="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Angle">angle</see>.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Angle">Angle</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Angle">
            <summary>
            Returns the angle of rotation, expressed in degrees.
            </summary>
            <remarks>
            <p class="body">
            The sign of the angle indicates the direction of movement around the pivot point
            In the first and second quadrants, a negative value indicates movement in a
            clockwise direction; in the third and fourth quadrants, the sign is reversed,
            with negative values indicating counter-clockwise movement.
            </p>
            <p class="body">
            Note that the frame of reference for the rotate gesture is defined by the first
            contact point, and not by the contact point's orientation with respect to the screen.
            For example, a gesture which begins with the moving finger at the nine o'clock
            position of the pivot point is indistinguishable from one which begins with the
            moving finger at the twelve o'clock position (assuming the movement is in the same
            direction in both cases).
            </p>
            <p class="body">
            The vertext of the angle is defined by the
            <see cref="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Angle">Angle</see>
            property.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs.Angle">Angle</seealso>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.RotateGestureHandler">
            <summary>
            Defines the signature of the handler for the RotateGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs">
            <summary>
            Contains information about the PressAndTapGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.HorizontalDelta">
            <summary>
            Returns the horizontal delta for this event.
            </summary>
            <remarks>
            <p class="body">
            The delta represents the distance between the horizontal components of the
            <see cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.PressLocation">PressLocation</see>
            and
            <see cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.TapLocation">TapLocation</see>,
            relative to the PressLocation.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.VerticalDelta">VerticalDelta</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.VerticalDelta">
            <summary>
            Returns the vertical delta for this event.
            </summary>
            <remarks>
            <p class="body">
            The delta represents the distance between the vertical components of the
            <see cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.PressLocation">PressLocation</see>
            and
            <see cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.TapLocation">TapLocation</see>,
            relative to the PressLocation.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.HorizontalDelta">HorizontalDelta</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.PressLocation">
            <summary>
            Returns the location of the pressed point for this gesture.
            </summary>
            <remarks>
            <p class="body">
            This property returns the location of the first touch point,
            which was held stationary while the second touch point is tapped.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.TapLocation">TapLocation</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.TapLocation">
            <summary>
            Returns the location of the tapped point for this gesture.
            </summary>
            <remarks>
            <p class="body">
            This property returns the location of the second touch point.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.PressLocation">PressLocation</seealso>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs.SendMouseDown">
            <summary>
            Returns or sets a boolean value indicating whether the control's
            MouseDown event is raised in response to this event.
            </summary>
            <remarks>
            <p class="body">
            This property is only applicable when the TimeElapsed property returns zero,
            indicating that this is the first of the two firings of the events for this gesture.
            </p>
            <p class="body">
            Since a context menu is typically displayed in response to the PressAndTapGesture event,
            and because many applications use the MouseDown event to initialize a context menu,
            a WM_RBUTTONDOWN message is sent to the control, causing the MouseDown event to fire.
            This property can be set to false to prevent this behavior.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.PressAndTapGestureHandler">
            <summary>
            Defines the signature of the handler for the PressAndTapGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureEventArgs">
            <summary>
            Contains information about the TwoFingerTapGesture event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureEventArgs.Location1">
            <summary>
            Returns the location of the first touch point.
            </summary>
            <remarks>
            <p class="body">
            Because this event is triggered by the simultaneous pressing of
            two touch points, there is no distinction between the first and
            second locations, other than there position on the screen.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureEventArgs.Location2">
            <summary>
            Returns the location of the second touch point.
            </summary>
            <remarks>
            <p class="body">
            Because this event is triggered by the simultaneous pressing of
            two touch points, there is no distinction between the first and
            second locations, other than there position on the screen.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureHandler">
            <summary>
            Defines the signature of the handler for the TwoFingerTapGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs">
            <summary>
            Contains information about the PressAndHoldGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.Gesture">
            <summary>
            Returns a constant identifying the gesture which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.Location">
            <summary>
            Returns the location of the touch point at which this gesture occurred, expressed in client coordinates.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.TimeElapsed">
            <summary>
            Returns the time elapsed, in milliseconds, since the user began the press and hold gesture,
            or zero if this event signifies the beginning of the gesture.
            </summary>
            <remarks>
            <p class="body">
            The PressAndHoldGesture event always fires twice, unless the
            <see cref="!:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.Cancel">Cancel</see>
            returns true. The first firing occurs when
            the user has pressed and held the touch surface, without moving, for a period of
            time equal to the
            <see cref="P:Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs.PressAndHoldDelay">PressAndHoldDelay</see>
            property. The TimeElapsed property returns zero in this case.
            </p>
            <p class="body">
            The second firing occurs when the user loses contact with the touch surface. The value
            of this property contains the amount of time the user maintained contact with the touch
            surface after the first firing of the event.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.ShowIndicator">
            <summary>
            Returns or sets a boolean value indicating whether a PressAndHoldIndicatorUIElement
            is displayed while the press and hold gesture is in progress.
            </summary>
            <remarks>
            <p class="body">
            This property is only applicable when the TimeElapsed property returns zero,
            indicating that this is the first of the two firings of the events for this gesture.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.SendMouseDown">
            <summary>
            Returns or sets a boolean value indicating whether the control's
            MouseDown event is raised immediately after execution returns
            from the firing of this event.
            </summary>
            <remarks>
            <p class="body">
            This property is only applicable when the TimeElapsed property returns zero,
            indicating that this is the first of the two firings of the events for this gesture.
            </p>
            <p class="body">
            Since a context menu is typically displayed in response to the PressAndHoldGesture event,
            and because many applications use the MouseDown event to initialize a context menu,
            a WM_RBUTTONDOWN message is sent to the control, causing the MouseDown event to fire.
            This property can be set to false to prevent this behavior.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs.EnablePanning">
            <summary>
            Returns or sets a boolean value indicating whether the PanGesture
            event will be allowed to occur if the user changes position on the
            touch surface before losing contact.
            </summary>
            <remarks>
            <p class="body">
            The EnablePanning property is only applicable for the first occurrence of
            the PressAndHold event, i.e., before the user has lost contact with
            the touch surface.
            </p>
            <p class="body">
            Setting this property to true enables pan gesture processing
            while the user changes position on the touch surface. This can be used,
            for example, to initiate a drag operation.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureHandler">
            <summary>
            Defines the signature of the handler for the PressAndHoldGesture event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Touch.GestureEventIds">
            <summary>
            Constants which identify the gesture-related events.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.None">
            <summary>
            No event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.GestureQueryStatus">
            <summary>
            The GestureQueryStatus event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.GestureStarting">
            <summary>
            The GestureStarting event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.PanGesture">
            <summary>
            The PanGesture event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.ZoomGesture">
            <summary>
            The ZoomGesture event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.RotateGesture">
            <summary>
            The RotateGesture event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.PressAndTapGesture">
            <summary>
            The PressAndTapGesture event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.TwoFingerTapGesture">
            <summary>
            The TwoFingerTapGesture event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.PressAndHoldGesture">
            <summary>
            The PressAndHoldGesture event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.GestureEventIds.GestureCompleted">
            <summary>
            The GestureCompleted event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.WM_TOUCH">
            <summary>
            WM_TOUCH = 0x0240
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.WM_GESTURE">
            <summary>
            WM_GESTURE = 0x0119
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.WM_TABLET_FLICK">
            <summary>
            WM_TABLET_FLICK = 0x02CB
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.FLICK_WM_HANDLED">
            <summary>
            FLICK_WM_HANDLED = 0x0001
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.WM_GESTURENOTIFY">
            <summary>
            WM_GESTURENOTIFY = 0x011A
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.WM_TABLET_QUERYSYSTEMGESTURE">
            <summary>
            WM_TABLET_QUERYSYSTEMGESTURE = 0x02CC
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.WM_KILLFOCUS">
            <summary>
            WM_KILLFOCUS = 0x0008
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TWF_FINETOUCH">
            <summary>
            TWF_FINETOUCH = 1
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TWF_WANTPALM">
            <summary>
            TWF_WANTPALM = 2
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.SM_DIGITIZER">
            <summary>
            SM_DIGITIZER = 0x005E
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TOUCHINPUTMASKF_TIMEFROMSYSTEM">
            <summary>
            TOUCHINPUTMASKF_TIMEFROMSYSTEM = 0x0001
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TOUCHINPUTMASKF_EXTRAINFO">
            <summary>
            TOUCHINPUTMASKF_EXTRAINFO = 0x0002
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TOUCHINPUTMASKF_CONTACTAREA">
            <summary>
            TOUCHINPUTMASKF_CONTACTAREA = 0x0004
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.TouchSupport.IsTouchSupported">
            <summary>
            Returns a boolean value indicating whether the local machine
            supports a touch-enabled input digitizer.
            </summary>
            <returns>A boolean value indicating whether touch input is supported.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.TouchSupport.IsTouchSupported(System.Boolean@,System.Boolean@)">
            <summary>
            Returns a boolean value indicating whether the local machine
            supports a touch-enabled input digitizer.
            </summary>
            <param name="multiInput">[out] Upon return, indicates whether the device supports multiple touch points.</param>
            <param name="deviceReady">[out] Upon return, indicates whether the device is currently ready for input.</param>
            <returns>A boolean value indicating whether touch input is supported.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.TouchSupport.RegisterGestures(Infragistics.Win.DataVisualization.Touch.GestureModes,System.IntPtr)">
            <summary>
            Calls the SetGestureConfig API to register as a gesture listener.
            </summary>
            <param name="mode">A GestureModes value, which contains a flag for each gesture to be registered.</param>
            <param name="hWnd">The window handle of the control to register.</param>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.None">
            <summary>The input digitizer does not have touch capabilities.</summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.IntegratedTouch">
            <summary>An integrated touch digitizer is used for input.</summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.ExternalTouch">
            <summary>An external touch digitizer is used for input.</summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.IntegratedPen">
            <summary>An integrated pen digitizer is used for input.</summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.ExternalPen">
            <summary>An external pen digitizer is used for input.</summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.MultiInput">
            <summary>An input digitizer with support for multiple inputs is used for input.</summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.Touch.TouchSupport.TouchSupportFlags.DeviceReady">
            <summary>
            The input digitizer is ready for input. If this flag is not set,
            it may mean that the tablet service is stopped, the digitizer is
            not supported, or digitizer drivers have not been installed.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.SR">
            <summary>
            Internal class for retrieving information from an assembly's resource file.
            </summary>
            <remarks>
            Any assembly that will share this class must have a default assembly level class
            named "AssemblyRef" which has a const string field named "BaseResourceName". The
            value of this const must be the resolved name of the resource file containing the
            resources for the assembly - specifically the string resources. Note, the resolved
            name is the default namespace for the project with the name of the resx file appended.
            e.g.
            class AssemblyRef
            {
            	// the default assembly here was Infragistics.Shared and the name
            	// of the resx file was string.resx
            	public const string BaseResourceName = "Infragistics.Shared.strings";
            }
            
            Additionally, any assemblies using this class should also add the 
            SatelliteContractVersion attribute to the assembly. This essentially provides a 
            version number which any satellite assemblies will use to associate with
            this assembly. Therefore, if the assembly using this class is rebuilt and
            has its version number incremented, the satellite dlls that been built against
            this dll will still work since it is the satellite contract version that binds
            the two. If you do not add this attribute, the compiler will use the assembly
            version number for the satellite contract version.
            e.g.
            [assembly: System.Resources.SatelliteContractVersion("1.0.5006.0")]
            
            And in case someone has a problem where the resources are not being displayed,
            the best thing to use if the log binding viewer (fuslogvw.exe). However, in
            order to have this work with resources, you need to make a modification to the
            registry. You can also have this log all binding info, including successful binds.
            The following info is straight out of MS's docs for settings this up:
            To log all binds in the viewer 
            	Set the HKLM\Software\Microsoft\Fusion\ForceLog registry value to 1 (the value is a DWORD). 
            	By default, Fuslogvw.exe only logs failed attempts to locate assemblies. You might have a situation where it is useful to view all successful assembly binds. For example, you might want to verify that an assembly is loading from your application directory instead of from the global assembly cache. Setting this registry key forces Fuslogvw.exe to log all assembly binds.
            To log bind failures to satellite assemblies 
            	Set the HKLM\Software\Microsoft\Fusion\LogResourceBinds registry value to 1 (the value is a DWORD). 
            	By default, Fuslogvw.exe does not log failed attempts to locate satellite assemblies. Setting this registry key enables this feature.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SR.GetString(System.String)">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <returns>Null if the name is null; otherwise a string from the resource for the default culture.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SR.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>Null if the name is null; otherwise a formatted string using the resource specified.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SR.GetString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Returns the resource string using the culture and name specified.
            </summary>
            <param name="culture">Culture whose resource should loaded. The resource will go through a fallback process to locate the appropriate resources.</param>
            <param name="name">Name of the string resource to return.</param>
            <returns>Null if the name is null; otherwise a localized string for specified culture.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SR.GetString(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Returns the resource string using the name and culture specified. The string is then formatted using the arguments specified.
            </summary>
            <param name="culture">Culture whose resource should loaded. The resource will go through a fallback process to locate the appropriate resources.</param>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>Null if the name is null; otherwise a formatted string using the resource specified.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SR.GetBitmap(System.String)">
            <summary>
            Gets a Bitmap from this assembly's resources.
            </summary>
            <param name="name">The resource name of the Bitmap to get.</param>
            <returns>The requested Bitmap.</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.LocalizedCategoryAttribute">
            <summary>
            Internal class for returning a localized category string
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LocalizedCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <b>LocalizedCategoryAttribute</b>
            </summary>
            <param name="category">Name of the resource containing the localizable category name</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.LocalizedDescriptionAttribute">
            <summary>
            Internal class for returning the localized description string
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LocalizedDescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of a <b>LocalizedDescriptionAttribute</b>
            </summary>
            <param name="description">Name of the resource containing the localizable description</param>
        </member>
        <member name="T:Infragistics.IEncoding">
            <summary>
            Interface used by different types of Encoding.
            </summary>
        </member>
        <member name="M:Infragistics.IEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The zero-based Index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The number of bytes produced by encoding the specified characters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="chars"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> or <paramref name="count"/> is less than zero.-or- <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in <paramref name="chars"/>. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="M:Infragistics.IEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The zero-based Index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The zero-based Index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The actual number of bytes written into <paramref name="bytes"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="chars"/> is null.-or- <paramref name="bytes"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="charIndex"/> or <paramref name="charCount"/> or <paramref name="byteIndex"/> is less than zero.-or- <paramref name="charIndex"/> and <paramref name="charCount"/> do not denote a valid range in <paramref name="chars"/>.-or- <paramref name="byteIndex"/> is not a valid Index in <paramref name="bytes"/>. </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="bytes"/> does not have enough capacity from <paramref name="byteIndex"/> to the End of the array to accommodate the resulting bytes. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Understanding Encodings for complete explanation).</exception>
        </member>
        <member name="P:Infragistics.IEncoding.FallbackCharacter">
            <summary>
            Gets the best fit character when a fallback occurs.
            </summary>
            <value>The best fit character.</value>
        </member>
        <member name="P:Infragistics.IEncoding.CodePage">
            <summary>
            Gets the code page.
            </summary>
            <value>The code page.</value>
        </member>
        <member name="P:Infragistics.IEncoding.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Infragistics.Portable.FastReflectionHelper">
            <summary>
            A reflection strategy that uses either traditional reflection or compiled lambda expressions
            to get property values from an object.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.#ctor">
            <summary>
            Constructs the fast reflection helper.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.#ctor(System.Boolean,System.String)">
            <summary>
            Constructs the fast reflection helper.
            </summary>
            <param name="useTraditionalReflection">Should the helper use traditional (slower) reflection.</param>
            <param name="propertyName">The propertyname this will be reflecting on.</param>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.GetPropertyValue(System.Object)">
            <summary>
            Gets the property value from the specified item.
            </summary>
            <param name="item"></param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.GetPropertyValue(System.Type,System.Object)">
            <summary>
            Gets the property value for the specified item.
            </summary>
            <param name="itemType">The item type.</param>
            <param name="item">The item containing the property.</param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="P:Infragistics.Portable.FastReflectionHelper.PropertyName">
            <summary>
            Gets or sets the property name of the current FastReflectionHelper object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastReflectionHelper.UseTraditionalReflection">
            <summary>
            Indicates that current FastReflectionHelper object is not using compiled expressions.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastReflectionHelper.Invalid">
            <summary>
            Returns true if the fast reflection helper is invalid, probably due to a lack of a property name.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.AboutDialog">
            <summary>
            About box.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.AboutDialog.#ctor(Infragistics.Win.DataVisualization.IUltraLicensedComponent)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.AboutDialogEditor">
            <summary>
            The propertry editor for the '(About)' property
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.AboutDialogEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns modal
            </summary>
            <returns>Returns the edit style.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.AboutDialogEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Brings up the about dialog
            </summary>
            <param name="context">Provides contextual information about the component</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services. </param>
            <param name="value">Value parameter</param>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.UltraLicense">
            <summary>
            The license object for Infragistics components and controls
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraLicense.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraLicense.ProductInfo">
            <summary>
            Returns the product info object
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraLicense.ComponentName">
            <summary>
            Returns the display name of the component (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraLicense.LicenseKey">
            <summary>
            returns the license key (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.DisposableObject">
            <summary>
               The base class Disposable maintains a boolean
               flag that keeps track of whether or not the object has
               been Disposed. It implemnets System.IDisposable and
               calls a virtual 'OnDispose' method to let the derived
               class know when the object has been Disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.HasSamePublicKey(System.Type)">
            <summary>
            Checks if the test object is from an assembly that is
            signed with the same public key as this assembly
            </summary>
            <returns>True if same</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.GetPublicKeyToken(System.Type)">
            <summary>
            Returns the public key token of a type's assembly.
            </summary>
            <param name="type">The type whose assembly is checked.</param>
            <returns>The public key token value. Either "null" or a 16 byte string.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.GetPublicKeyToken(System.Reflection.Assembly)">
            <summary>
            Returns the public key token of an assembly.
            </summary>
            <param name="assemblyToCheck">The assembly to check.</param>
            <returns>The public key token value. Either "null" or a 16 byte string.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.CloneSerializableObject(System.Runtime.Serialization.ISerializable)">
            <summary>
            Creates and returns a deep copy clone of the object
            </summary>
            <param name="source">The object to be cloned.</param>
            <returns>The cloned object</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.Dispose">
            <summary>
            Called to Dispose the object
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.VerifyNotDisposed">
            <summary>
            Will throw an ObjectDisposedException exception
            if the object has been disposed of.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.OnDispose">
            <summary>
            Called when an active object is Disposed to notify a
            derived class when the object has been Disposed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DisposableObject.ConvertValue(System.Object,System.Type)">
            <summary>
            Returns a value converted to the specified type using the InvariantCulture.
            </summary>
            <param name="value">Value to convert</param>
            <param name="destinationType">Type that the value needs to be converted to.</param>
            <returns>If the value can be converted to the specified type, the converted value will be returned. If the value is already of that type or cannot be converted to that type, the <paramref name="value"/> will be returned; otherwise null is returned.</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DisposableObject.Disposed">
            <summary>
            Returns true if the object has already been disposed
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.IUltraLicensedComponent">
            <summary>
            Interface implemented by Infragistics licensed componenents
            and controls.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.IUltraLicensedComponent.License">
            <summary>
            Returns the component's license object (read-only) 
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.UltraLicenseBaseAttribute">
            <summary>
            The abstract base class for our license attribues
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraLicenseBaseAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="componentName">The name of the component that will be displayed in the about dialog.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraLicenseBaseAttribute.ComponentName">
            <summary>
            Returns the display name of the component (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraLicenseBaseAttribute.LicensedWithProducts">
            <summary>
            Returns an array of UltraProductInfoBase objects.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.UltraLicenseProvider">
            <summary>
            Base class for licensing
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Overriden to return a beta license object
            </summary>
            <returns>The BetaLicense object</returns>
            <param name="context">A reference to the license context object</param>
            <param name="type">The Type to get a license for.</param>
            <param name="instance">A reference to the component.</param>
            <param name="allowExceptions">Whether or not to throw an exception if one occurs.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraLicenseProvider.GetDesignTimeLicense(System.Type,System.Object,System.Boolean,Infragistics.Win.DataVisualization.UltraLicenseBaseAttribute)">
            <summary>
            Returns the highest design time license for all the products
            this component is licensed with
            </summary>
            <returns>A license for the appropriate product or null if not licensed.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraLicenseProvider.GetRunTimeLicense(System.String,System.Type,System.Object,System.Boolean,Infragistics.Win.DataVisualization.UltraLicenseBaseAttribute)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>A license for the appropriate product or null if invalid.</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.LicenseStatus">
            <summary>
            An enumerator that describes the status of the license
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.Unchecked">
            <summary>
            The license verification logic hasn't run yet
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.UnableToLocateLicenseAssembly">
            <summary>
            The license file could not be located.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.InsufficientSecurityPermissions">
            <summary>
            Unable to determine license status due to security permission restrictions.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.RegKeyNotFound">
            <summary>
            Couldn't find the necessary registry keys
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.CDKeyInvalid">
            <summary>
            Foound an invalid CDkey
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.BetaExpired">
            <summary>
            The beta period has expired
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.BetaValid">
            <summary>
            The beta period has not expired
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.TrialExpired">
            <summary>
            The trial period has expired
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.ActivationGracePeriodExpired">
            <summary>
            The activation grace period has expired.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.CDKeyValid">
            <summary>
            A valid CDKey was found
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.TrialValid">
            <summary>
            The trial period has not expired
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.ActivationGracePeriodValid">
            <summary>
            The activation grace period has not expired.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LicenseStatus.Licensed">
            <summary>
            The component is fully licensed
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.ProductType">
            <summary>
            An enumerator that describes the product type.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.ProductType.WinFormsComponent">
            <summary>
            The product is a winforms component.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.ProductType.WebFormsComponent">
            <summary>
            The product is a webforms component.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.UltraProductInfoBase">
            <summary>
            Abstract base class that holds product info.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfoBase.IsKeyValid(System.String)">
            <summary>
            Checks the validaity of the key
            </summary>
            <returns>True if the key is valid</returns>
            <param name="key">The key to validate.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.ProductName">
            <summary>
            Returns the product name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfoBase.Type">
            <summary>
            Returns the product type
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.BetaProductInfo">
            <summary>
            ProductInfo used when a product is in beta.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BetaProductInfo.#ctor(System.String,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="productName">The product name to display in the about dialog.</param>
            <param name="expirationDate">The expiration date of the beta.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BetaProductInfo.#ctor(System.String,System.DateTime,Infragistics.Win.DataVisualization.ProductType)">
            <summary>
            Constructor
            </summary>
            <param name="productName">The product name to display in the about dialog.</param>
            <param name="expirationDate">The expiration date of the beta.</param>
            <param name="productType"></param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BetaProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.BetaProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.UltraProductInfo">
            <summary>
            ProductInfo used when after a product has been released.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.#ctor(System.String,System.String,System.String,System.Guid,System.Boolean,System.Byte,System.Byte)">
            <summary>
            Contructor
            </summary>
            <param name="productName">The product name for the about dialog</param>
            <param name="regKeyProductName">The reg key root product name</param>
            <param name="codePrefix">must be 4 characters long</param>
            <param name="id">the id</param>
            <param name="requiresActivation">True if activation is required.</param>
            <param name="majorVersion">Major version of the product.</param>
            <param name="minorVersion">Minor version of the product.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.#ctor(System.String,System.String,System.String,System.Guid,System.Boolean,Infragistics.Win.DataVisualization.ProductType,System.Byte,System.Byte)">
            <summary>
            Contructor
            </summary>
            <param name="productName">The product name for the about dialog</param>
            <param name="regKeyProductName">The reg key root product name</param>
            <param name="codePrefix">must be 4 characters long</param>
            <param name="id">the id</param>
            <param name="requiresActivation">True if activation is required.</param>
            <param name="productType">The type of product</param>
            <param name="majorVersion">Major version of the product.</param>
            <param name="minorVersion">Minor version of the product.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.ProductVerified(Infragistics.Win.DataVisualization.UltraProductInfo)">
            <summary>
            Adds a product to the cached list of verified products.
            </summary>
            <param name="product">Product to add.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.CheckProductStatus(Infragistics.Win.DataVisualization.UltraProductInfo,System.Boolean)">
            <summary>
            Checks to see if a product has already been verified.
            </summary>
            <param name="product">Product to checked.</param>
            <param name="updateProductInfoIfFound">Boolean indicating if the supplied product's members should be updated if a match is found.</param>
            <returns>Status of the product. If the product has not already been
            verified, Unchecked will be returned.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.IsCDKeyPrefixValid(System.String)">
            <summary>
            Verifies the format of the cdkey 8 byte prefix
            </summary>
            <param name="licKey">String containing the cdkey to verify.</param>
            <returns>A boolean indicating if the first 8 characters are well formed.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.GetExpirationDate(System.Int32)">
            <summary>
            Returns the expiration date based on the number of usage days remaining.
            </summary>
            <param name="usageDaysRemaining">Number of usage days remaining.</param>
            <returns>Expiration date for the product.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UltraProductInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current Object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>true if the specified see cref="System.Object"/&gt; is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.Expiration">
            <summary>
            Returns the expiration description.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UltraProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.UnlicensedProductInfo">
            <summary>
            ProductInfo used for non-licensed products.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UnlicensedProductInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UnlicensedProductInfo.#ctor(System.String,Infragistics.Win.DataVisualization.ProductType)">
            <summary>
            Constructor
            </summary>
            <param name="productName">The product name to display in the about dialog</param>
            <param name="productType">The type of product.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.UnlicensedProductInfo.IsKeyValid(System.String)">
            <summary>
            Checks the validity of the key
            </summary>
            <returns>True if the key is valid</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.Expiration">
            <summary>
            Returns the expiration.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.RequiresActivation">
            <summary>
            Returns the expiration date.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.Status">
            <summary>
            Returns the statuc of the license
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.Key">
            <summary>
            Returns the Key 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.CompanyName">
            <summary>
            Returns the company name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.UserName">
            <summary>
            Returns the user name
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.UnlicensedProductInfo.Expired">
            <summary>
            Returns true if the license has expired (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.StyleConverter">
            <summary>
            Type converter for objects of type Style.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.StyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for System.String.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.StyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to System.String.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.StyleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertFrom
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.StyleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertFrom
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BrushCollection.SyncCachedBrushes">
            <summary>
            This method should be called in the OnEndInit method when the control is in design mode.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.DVBaseControl">
            <summary>
            Base Class for all Windows Forms based DataVisualization controls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DVBaseControl.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DVBaseControl.ResetSize">
            <summary>
            Resets the <see cref="T:System.Drawing.Size"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">Invoke this method to reset the Size property to its default value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DVBaseControl.SaveTo(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the chart to the given file using the specified ImageFormat.
            </summary>
            <param name="filename">The full path and filename of the image that is being saved.</param>
            <param name="format">The file format of the image, specified using ImageType enum.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DVBaseControl.SaveTo(System.String,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
            <summary>
            Saves the chart as the specified size to a file using the specified ImageFormat.
            </summary>
            <param name="filename">The full path and filename of the image that is being saved.</param>
            <param name="format">The file format of the image, specified using ImageType enum.</param>
            <param name="size">The rendered size of the image.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DVBaseControl.SaveTo(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the chart to the stream using the specified ImageFormat.
            </summary>
            <param name="stream">The Stream being used to save the image.</param>
            <param name="format">The file format of the image, specified using ImageType enum.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DVBaseControl.SaveTo(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
            <summary>
            Saves the chart as the specified size to the stream using the specified ImageFormat.
            </summary>
            <param name="stream">The Stream being used to save the image.</param>
            <param name="format">The file format of the image, specified using ImageType enum.</param>
            <param name="size">The rendered size of the image.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DVBaseControl.BackgroundImage">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DVBaseControl.BackgroundImageLayout">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DVBaseControl.DefaultSize">
            <summary>
            Return the value of <code>DefaultConstants.D_ChartSize</code>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BoundListManager.ShouldSerializeDataSource">
            <summary>
            Returns whether the <see cref="P:Infragistics.Win.DataVisualization.BoundListManager.DataSource"/> property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BoundListManager.ResetDataSource">
            <summary>
            Resets the <see cref="P:Infragistics.Win.DataVisualization.BoundListManager.DataSource"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BoundListManager.ShouldSerializeDataMember">
            <summary>
            Returns whether the <see cref="P:Infragistics.Win.DataVisualization.BoundListManager.DataMember"/> property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BoundListManager.ResetDataMember">
            <summary>
            Resets the <see cref="P:Infragistics.Win.DataVisualization.BoundListManager.DataMember"/> property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.BoundListManager.DataSource_Dispose(System.Object,System.EventArgs)">
            <summary>
            Handle the Disposed event from the data source - typically used at design time
            so the we know that the data source has been removed from the design surface
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.DataBindingUtils">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DataBindingUtils.GetItemProperties(System.Windows.Forms.BindingManagerBase)">
            <summary>
            Gets the collection of property descriptors. 
            </summary>
            <param name="bm">Binding manager.</param>
            <returns>Property collection.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DataBindingUtils.IsKnownType(System.Type)">
            <summary>
            Checks if the type is a known type (to Infragistics controls).
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns>True if the specified type is recognizable to Infragistics controls.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DataBindingUtils.StripMember(System.String)">
            <summary>
            Used to strip out all characters that are before the last period
            of the passed in value.
            </summary>
            <param name="text">The string to strip down.</param>
            <returns>A string that only contains the characters after the last period of the passed in value.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DataBindingUtils.GetObjectForComparison(System.Object)">
            <summary>
            This method returns the object that will be compared against when syncing data bound items
            with the underlying bound list.
            </summary>
            <param name="listObject">The object from which to objecain the sync object.</param>
            <returns>An object that will be used for comparison.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DataBindingUtils.GetCurrencyManager(System.Windows.Forms.BindingContext,System.Object,System.String)">
            <summary>
            Returns the CurrencyManager for the specified dataSource and dataMember based on the bindingContext.
            </summary>
            <param name="bindingContext">The <see cref="T:System.Windows.Forms.BindingContext"/> used to retrieve the CurrencyManager.</param>
            <param name="dataSource">The data source associated with a particular <see cref="T:System.Windows.Forms.BindingManagerBase"/></param>
            <param name="dataMember">The name of a specific data member in a multitier data source.</param>
            <returns>The CurrencyManager for the specified dataSource and dataMember based on the bindingContext.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DataBindingUtils.IsDataMemberChangeRequired(System.Windows.Forms.Control,System.Object,System.String)">
            <summary>
            Returns true if the data member should be changed. 
            </summary>
            <param name="control">The control to which the data source is associated.</param>
            <param name="dataSource">The data source for the control.</param>
            <param name="dataMember">The data member for the control.</param>
            <returns>Returns true if the data member should be changed</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.DataBindingUtils.ValuePropertyDescriptorCreator">
            <summary>
            Delegate for property descriptor creators.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.FastItemColumn">
            <summary>
            Represents a cached column of doubles in a fast datasource.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IFastItemColumn`1">
            <summary>
            Represents the public view of a FastItemsSource column.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IFastItemColumnPropertyName">
            <summary>
            Interface for objects which store a property name to be used in a FastItemColumn.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IFastItemColumnPropertyName.PropertyName">
            <summary>
            Gets the column's property name.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IFastItemColumn`1.Minimum">
            <summary>
            Gets the column's minimum value.
            </summary>
            <remarks>
            The minimum is calculated in amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.IFastItemColumn`1.Maximum">
            <summary>
            Gets the column's maximum value.
            </summary>
            <remarks>
            The maximum is calculated in amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.IFastItemColumn`1.MayContainUnknowns">
            <summary>
            Gets if the data may contain unknown values (null, NaN, etc).
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemDateTimeColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemDateTimeColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemObjectColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemObjectColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemIntColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemIntColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="T:Infragistics.Portable.FastItemsSource">
            <summary>
            Represents a view of an enumerable items source
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IFastItemsSource">
            <summary>
            Represents an efficient retrieval of items from a data source.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.IndexOf(System.Object)">
            <summary>
            Gets the index of the requested item.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>The requested index.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.RegisterColumn(System.String)">
            <summary>
            Gets a column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.DeregisterColumn(Infragistics.Portable.IFastItemColumnPropertyName)">
            <summary>
            Deregisters a column.
            </summary>
            <param name="fastItemColumn">The column to deregister.</param>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.RegisterColumnInt(System.String)">
            <summary>
            Gets an integer column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.RegisterColumnObject(System.String)">
            <summary>
            Gets an object column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.RegisterColumnDateTime(System.String)">
            <summary>
            Gets a date time column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.HandleCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies of a collection event.
            </summary>
            <param name="e">The collection event.</param>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSource.ContentsAsIList">
            <summary>
            Fetches the contents as an IList
            </summary>
            <returns>the IList</returns>
        </member>
        <member name="P:Infragistics.Portable.IFastItemsSource.Item(System.Int32)">
            <summary>
            Gets the item that the requested index.
            </summary>
            <param name="i">The index from which to request an item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="E:Infragistics.Portable.IFastItemsSource.Event">
            <summary>
            Indicates that the data has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IFastItemsSource.Count">
            <summary>
            Gets the number of records in the items source.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.#ctor">
            <summary>
            FastItemsSource constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.Detach">
            <summary>
            Detaches this instance by removing old listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.Attach">
            <summary>
            Attaches this instance by adding new listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.GetEnumerator">
            <summary>
            Gets the IEnumerator used for looping through the FastItemsSource.
            </summary>
            <returns>The IEnumerator used for looping through the FastItemsSource.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>The index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumnDateTime(System.String)">
            <summary>
            Returns a DateTime FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>A DateTime FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumnObject(System.String)">
            <summary>
            Returns an object FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>An object FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumnInt(System.String)">
            <summary>
            Returns an integer FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>An integer FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumn(System.String)">
            <summary>
            Returns a FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>A FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.DeregisterColumn(Infragistics.Portable.IFastItemColumnPropertyName)">
            <summary>
            Uninitializes the FastItemColumn with the given property name.
            </summary>
            <param name="fastItemColumn">The object responsible for providing the property name of the FastItemColumn.</param>
        </member>
        <member name="E:Infragistics.Portable.FastItemsSource.Event">
            <summary>
            The FastItemsSourceEvent, which is raised when the collection is updated.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.ItemsSource">
            <summary>
            The enumerable list of objects to get data from.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.Count">
            <summary>
            Gets the number of items in the current FastItemsSource object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.Item(System.Int32)">
            <summary>
            Gets the items at the specified position.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.Item(System.Object)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Portable.IFastItemsSourceProvider">
            <summary>
            Implementors are providers of FastItemsSource instances.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSourceProvider.GetFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Gets a fast item source for the target enumerable.
            </summary>
            <param name="target">The enumerable to get the FastItemsSource for.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSourceProvider.ReleaseFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Releases a FastItemsSource reference.
            </summary>
            <param name="itemsSource">The enumerable for which to release the FastItemsSource.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="T:Infragistics.Controls.PropertyChangedEventArgs`1">
            <summary>
             Provides data for the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event.    
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Controls.PropertyChangedEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.PropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.PropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets the value before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.PropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets the value after the change.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.FontUtil">
            <summary>
            Utility class for math operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FontUtil.GetCurrentFontHeight(Infragistics.Portable.FontInfo)">
            <summary>
            Uses the font on temporarily added span added to the
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.FontUtil.GetFont(System.Object)">
            <summary>
            Takes a jquery container and extracts the font property of it
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.FontUtil.MeasureStringWidth(System.String,Infragistics.Portable.FontInfo,Infragistics.RenderingContext)">
            <summary>
            Returns the width of a string in pixels
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.GdiDrawStringFlags">
            <summary>
            Flags for specifying how text is to be measured/rendered. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.None">
            <summary>
            No special considerations are given to the measurement/rendering.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.DirectionVertical">
            <summary>
            The measurement/rendering is intended for text that is drawn with vertical orientation.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.IsPrinting">
            <summary>
            The measurement/rendering is for printing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.GDIPlus">
            <summary>
            The preferred method of measurement/rendering should use GDI+. Note that if both the GDI+
            and GDI flags are specified, GDI+ will be given preference.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.GDI">
            <summary>
            The preferred method of measurement/rendering should use GDI. Note that if both the GDI+
            and GDI flags are specified, GDI+ will be given preference.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.NoPadding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.Themed">
            <summary>
            The measurement/rendering is for themed text.  Note that this flag will take precedence over GDI
            and GDI+.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.GdiDrawStringFlags.ThemedWithGlow">
            <summary>
            The measurement/rendering is for themed text with glow, available only on Vista.  Note that this 
            flag will take precedence over GDI and GDI+.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.ColorRenderMode">
            <summary>
            Enumeration of the various methods of printing colors.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.ColorRenderMode.Color">
            <summary>
            Colors and background images are rendered as they are on the screen.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.ColorRenderMode.GrayScale">
            <summary>
            Colors and images are rendered using grayscale.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.ColorRenderMode.Monochrome">
            <summary>
            Background colors and background images are not rendered. Foreground colors are rendered in black.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.GetDrawingRectangle(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Given a System.Windows.Shapes.Shape return a representative System.Drawing.Rectangle.
            </summary>
            <param name="shape">The System.Windows.Shapes.Shape.</param>
            <returns>Returns a representative System.Drawing.Rectangle.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.GetDrawingRectangle(Infragistics.Portable.Rect)">
            <summary>
            Given a System.Windows.Rect return a representative System.Drawing.Rectangle.
            </summary>
            <param name="rect"> The System.Windows.Rect.</param>
            <returns>Returns a representative System.Drawing.Rectangle.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.GetDrawingPoint(Infragistics.Portable.Point)">
            <summary>
            Given a System.Point return a System.Drawing.PointF.
            </summary>
            <param name="point">The System.Point.</param>
            <returns>Returns a representative System.Drawing.PointF.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.GetColor(Infragistics.Portable.Graphics.Media.Brush)">
            <summary>
            Given a System.Windows.Media.Brush return a System.Drawing.Color.
            </summary>
            <param name="brush">The System.Windows.Media.Brush.</param>
            <returns>Returns a System.Drawing.Color from a System.Windows.Media.Brush.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.GetPointFArrayFromPointCollection(Infragistics.Portable.PointCollection,System.Drawing.PointF)">
            <summary>
            Converts a PointCollection to a System.Drawing.PointF[] and inserts the last point as the first point in the array.
            </summary>
            <param name="pointCollection">The PointCollection to convert.</param>
            <param name="lastpoint">The last point that will be inserted as the first item in the array.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawString(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Draws the specified string at the specified location with the specified color and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="drawChache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="x">The left corner of the drawn text.</param>
            <param name="y">The top corner of the drawn text.</param>
            <param name="color">The color of the drawn text.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawString(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Drawing.Color,System.Drawing.RectangleF)">
            <summary>
            Draws the specified string at the specified location with the specified color and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="drawCache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="color">The color of the drawn text.</param>
            <param name="bounds">The RectangleF that specifies the location of the drawn text.</param>
            <param name="stringFormat">The StringFormat that specifies formatting attributes.</param>
            <param name="drawStringFlags">Flags which specify the special consideration, if any, that should be given to the rendering.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawString(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Drawing.SolidBrush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="drawCache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="brush">The SolidBrush that determines the color of the drawn text.</param>
            <param name="bounds">The RectangleF that specifies the location of the drawn text.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawStringBitmap(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Draws a string into a bitmap on the graphics passed in to the method.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="drawCache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="x">The x coordinate to render.</param>
            <param name="y">The y coordinate to render.</param>
            <param name="color">The color of the drawn text.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawStringBitmap(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Drawing.Color,System.Drawing.RectangleF)">
            <summary>
            Draws a string into a bitmap on the graphics passed in to the method within the given rectangleF.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="drawCache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="color">The color of the drawn text.</param>
            <param name="rectF">The location and size.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawStringHelper(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Drawing.SolidBrush,System.Drawing.Rectangle)">
            <summary>
            Draws the specified text.
            </summary>
            <param name="gr">The Graphics object on which to render the text.</param>
            <param name="text">The text to render.</param>
            <param name="drawCache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="brush">The brush to use for the rendering.</param>
            <param name="bounds">The rectangle in which the text is to be rendered.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawStringWithTabStops(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.TextFormatFlags,System.Single[])">
            <summary>
            Draws the specified string at the specified location with the specified brush and font.
            </summary>
            <param name="gr">The Graphics object.</param>
            <param name="text">The string to draw.</param>
            <param name="drawCache">The DrawCache which contains various properties used for the drawing.</param>
            <param name="bounds">The Rectangle that specifies the location of the drawn text.</param>
            <param name="color">The color of the drawn text.</param>
            <param name="textFormatFlags">The TextFormatFlags enumeration that specifies formatting attributes.</param>
            <param name="tabStops">An array of floating-point values that define the tab stop locations.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.StringFormat,Infragistics.Win.DataVisualization.GdiDrawStringFlags)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <param name="drawStringFlags">Flags which specify the special consideration, if any, that should be given to the measurement.</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat,Infragistics.Win.DataVisualization.GdiDrawStringFlags)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="notUsed">This parameter is used only to mimic the signature of the overload of Graphics.MeasureString that takes a PointF. This overload has no GDI equivalent; the overload that takes a SizeF is called in its place, and SizeF.Empty is specified.</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <param name="drawStringFlags">Flags which specify the special consideration, if any, that should be given to the measurement.</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.MeasureStringHelper(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Size,System.Drawing.StringFormat,System.Int32@,System.Int32@,System.Boolean,Infragistics.Win.DataVisualization.GdiDrawStringFlags)">
            <summary>
            Measures the specified string.
            </summary>
            <param name="gr">The Graphics object to use for the measurement.</param>
            <param name="text">The string to measure</param>
            <param name="font">The font to use for the measurement.</param>
            <param name="layoutArea">The constraining size for the measurement.</param>
            <param name="stringFormat">The string formatting flags for the measurement.</param>
            <param name="charactersFitted">[out] On return, contains the number of characters fitted.</param>
            <param name="linesFilled">[out] On return, contains the number of lines filled.</param>
            <param name="returnElementsFitted">Specifies whether the 'charactersFitted' and 'linesFilled' parameters should be calculated. Specifying false implies that the 'charactersFitted' and 'linesFilled' parameters will not contain meaningful values upon return.</param>
            <param name="drawStringFlags">Flags which determine what kind of special consideration, if any, is given to the measurement.</param>
            <returns>The size required to render the specified text.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)">
            <summary>
            Wraps the MeasureText method of the TextRenderer class.
            </summary>
            <param name="gr">The Graphics object</param>
            <param name="text">The text to measure</param>
            <param name="font">The font to use for the measurement</param>
            <param name="layoutArea">The maximum layout area for the measurement</param>
            <param name="stringFormat">The StringFormat to use for the measurement</param>
            <returns>A SizeF struct that describes the size required to contain the text.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Int16,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean)">
            <summary>
            Renders the <see cref="!:AppearanceData.ImageBackground"/> for the <see cref="!:AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="alphaLevel">Actual alpha level to use when rendering the image. This value should be calculated using the <see cref="!:GetAlphaLevel(AlphaBlendMode,Alpha,short)"/> method.</param>
            <param name="destRect">Rect into which the image should be rendered</param>
            <param name="srcRect">Portion of the image that should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="tile">True to tile the image</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Int16,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes,System.Boolean,Infragistics.Win.DataVisualization.ColorRenderMode)">
            <summary>
            Renders the <see cref="!:AppearanceData.ImageBackground"/> for the <see cref="!:AppearanceData"/> in the specified graphics object.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="alphaLevel">Actual alpha level to use when rendering the image. This value should be calculated using the <see cref="!:GetAlphaLevel(AlphaBlendMode,Alpha,short)"/> method.</param>
            <param name="destRect">Rect into which the image should be rendered</param>
            <param name="srcRect">Portion of the image that should be rendered</param>
            <param name="invalidRect">Invalid rect</param>
            <param name="imgAttributes">Existing image attributes used when rendering the image.</param>
            <param name="tile">True to tile the image</param>
            <param name="colorRenderMode">Determines how colors in the image are rendered.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.RendererUtilities.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int16,System.Drawing.Imaging.ImageAttributes,System.Boolean,Infragistics.Win.DataVisualization.ColorRenderMode)">
            <summary>
            Renders the specified image using the specified alpha level.
            </summary>
            <param name="g">Graphics object to render into</param>
            <param name="image">Image to render</param>
            <param name="destRect">Destination rect where the image should be rendered</param>
            <param name="srcRect">Area of the image to render</param>
            <param name="alphaLevel">Alpha level used to render the image</param>
            <param name="imgAttributes">Existing image attributes or null</param>
            <param name="tile">True if the image should be tiled across the destination rect</param>
            <param name="colorRenderMode">Determines how the colors in the image are rendered.</param>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.DrawStringParameters">
            <summary>
            Provides a means of passing parameters to DrawUtility.DrawString or DrawUtility.MeasureString through a single instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DrawStringParameters.#ctor(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.SolidBrush,System.Drawing.RectangleF,System.Drawing.StringFormat,Infragistics.Win.DataVisualization.GdiDrawStringFlags,Infragistics.Win.DataVisualization.TextOrientationInfo)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.DataVisualization.DrawStringParameters"/> instance.
            </summary>
            <param name="graphics">The graphics object used to draw or measure the text.</param>
            <param name="text">The text to draw or measure.</param>
            <param name="font">The font to use when drawing or measuring the text.</param>
            <param name="brush">The SolidBrush that determines the color of the drawn text.</param>
            <param name="layoutBounds">The location and size of the area used to draw or measure the text.</param>
            <param name="format">The string format used to draw or measure the text.</param>
            <param name="drawStringFlags">
            The flags which determine what kind of special consideration, if any, is given to the measuring or drawing of text.
            </param>
            <param name="textOrientation">The orientation to use when measuring or drawing the text.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.Brush">
            <summary>
            Gets or sets the SolidBrush that determines the color of the drawn text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.DrawStringFlags">
            <summary>
            Gets or sets the flags which determine what kind of special consideration, if any, is given to the 
            measuring or drawing of text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.Font">
            <summary>
            Gets or sets the font to use when drawing or measuring the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.Format">
            <summary>
            Gets or sets the string format used to draw or measure the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.Graphics">
            <summary>
            Gets or sets the graphics object used to draw or measure the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.LayoutBounds">
            <summary>
            Gets or sets the location and size of the area used to draw or measure the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.LayoutLocation">
            <summary>
            Gets or sets the location of the area used to draw or measure the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.LayoutSize">
            <summary>
            Gets or sets the size of the area used to draw or measure the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.Text">
            <summary>
            Gets or sets the text to draw or measure.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.DrawStringParameters.TextOrientation">
            <summary>
            Gets or sets the orientation to use when measuring or drawing the text.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.TextOrientationInfo">
            <summary>
            Immutable class which defines the rotation and flow direction of text.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TextOrientationInfo.#ctor(System.Int32,Infragistics.Win.DataVisualization.TextFlowDirection)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> instance.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> If a vertical flow direction is specified, the value of the rotation angle must be 0 degrees. 
            Rotating vertical flow text is not supported.
            </p>
            </remarks>
            <param name="degrees">The angle of rotation of the text, in degrees, counter-clockwise from the horizontal line.</param>
            <param name="flowDirection">The flow direction of the text.</param>
            <exception cref="!:InvalidEnumArgumentException">
            <paramref name="flowDirection"/> is a value which is not defined in the <see cref="T:Infragistics.Win.DataVisualization.TextFlowDirection"/> enumeration.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="flowDirection"/> is Vertical and <paramref name="degrees"/> is not 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="degrees"/> is not in the range of -90 to 90 degrees inclusive.
            </exception>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TextOrientationInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified value is equal to this <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.
            </summary>
            <param name="obj">The value to compare to this <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.</param>
            <returns>True if the value is equivalent to this <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TextOrientationInfo.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.
            </summary>
            <returns>A hash code for the this <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TextOrientationInfo.ToString">
            <summary>
            Gets the string representation of this <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.
            </summary>
            <returns>A string representation of this <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>.</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.Degrees">
            <summary>
            Gets the angle of rotation of the text, in degrees, counter-clockwise from the horizontal line.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.FlowDirection">
            <summary>
            Gets the flow direction of the text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.Horizontal">
            <summary>
            Gets a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> representing horizontal flow text.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.Horizontal45Degrees">
            <summary>
            Gets a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> representing horizontal flow text which is rotated 45 degrees.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.Horizontal90Degrees">
            <summary>
            Gets a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> representing horizontal flow text which is rotated 90 degrees.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.HorizontalNegative45Degrees">
            <summary>
            Gets a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> representing horizontal flow text which is rotated -45 degrees.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.HorizontalNegative90Degrees">
            <summary>
            Gets a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> representing horizontal flow text which is rotated -90 degrees.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TextOrientationInfo.Vertical">
            <summary>
            Gets a <see cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/> representing vertical flow text.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.TextFlowDirection">
            <summary>
            Determines the flow direction of text.
            </summary>
            <seealso cref="T:Infragistics.Win.DataVisualization.TextOrientationInfo"/>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.TextFlowDirection.Horizontal">
            <summary>
            The text should flow horizontally and can be rotated.
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.TextFlowDirection.Vertical">
            <summary>
            The text should flow vertically.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.TextRendererWrapper">
            <summary>
            Using TextRenderer.DrawText leads to various artifacts when drawing to transparent images.
            This class is added in order to workaround this issue.
            First it draws the text to a temporary image. Then it process the temporary image and fixes its artifacts.
            Finally the temporary image is drawn on the actual graphics object.
            Note that for drawing we use Color.Magenta as it gives us good, predictable result.
            After that the color of the text is changed from Magenta to the actual forecolor of the text when the image
            is processed
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TextRendererWrapper.DrawText(System.Drawing.Graphics,System.String,Infragistics.Win.DataVisualization.DrawCache,System.Drawing.Color,Infragistics.Win.DataVisualization.Point,System.Windows.Forms.TextFormatFlags,System.Nullable{System.Drawing.Size})">
            <summary>
            Draws the specified text to the graphics object by first drawing to a temporary image, then processing it 
            in order to remove any GDI artifacts and then draws the temporary image to the graphics object
            </summary>
            <param name="g"> The graphics object to draw into </param>
            <param name="text"> The text to draw </param>
            <param name="drawCache"> The DrawCache which contains various properties used for the drawing</param>
            <param name="foreColor"> The color of the text</param>
            <param name="location"> The location where to draw the text</param>
            <param name="flags"> The TextRenderingFlags to use when drawing the text </param>
            <param name="size"> The size of the text. If not specified, the method will use MeasureText in order to calculate it</param>
        </member>
        <member name="T:Infragistics.Portable.ComponentContainer">
            <summary>
            Represents a base class for component container
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.#ctor">
            <summary>
            Creates instance of ComponentContainer
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.RaiseSizeChanged(System.Double,System.Double)">
            <summary>
            Raises the SizeChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.RaiseInvalidated(Infragistics.Portable.IRenderer)">
            <summary>
            Raises the Invalidated event
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.RaiseAfterInvalidated(Infragistics.Portable.IRenderer)">
            <summary>
            Raises the Invalidated event
            </summary>
        </member>
        <member name="E:Infragistics.Portable.ComponentContainer.SizeChanged">
            <summary>
            Occurs when size of the component container is changed 
            </summary>
        </member>
        <member name="E:Infragistics.Portable.ComponentContainer.Invalidated">
            <summary>
            Occurs when the component container is invalidated 
            </summary>
        </member>
        <member name="E:Infragistics.Portable.ComponentContainer.AfterInvalidated">
            <summary>
            Occurs after the component container is invalidated 
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ComponentContainer.Width">
            <summary>
            Gets or sets Width of the component container
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ComponentContainer.Height">
            <summary>
            Gets or sets Height of the component container
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ComponentContainer.PixelScalingRatio">
            <summary>
            Gets or sets the scaling value used to affect the pixel density of the control.
            </summary>
            <remarks>
            A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
            to appear blurry.
            </remarks>
        </member>
        <member name="T:Infragistics.Portable.ITickProvider">
            <summary>
            Represents an a driver than can provide timing support for animation engines.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ITickProvider.SetupTicking(System.Action)">
            <summary>
            Sets up a ticker that will invoke the specified callback when requested.
            </summary>
            <param name="callback">The callback method to invoke.</param>
            <returns>And identifier for the ticker.</returns>
        </member>
        <member name="M:Infragistics.Portable.ITickProvider.RequestFrame(System.Int32)">
            <summary>
            Requests a frame to tick for the identified ticker. The ticker's callback will be invoked at earliest opportunity.
            </summary>
            <param name="id">The id of the ticker to schedule a tick for.</param>
        </member>
        <member name="M:Infragistics.Portable.ITickProvider.TeardownTicking(System.Int32)">
            <summary>
            Requests that the ticker identified by the id is torn down.
            </summary>
            <param name="id">The id of the ticker to tear down.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnGestureQueryStatus(Infragistics.Win.DataVisualization.Touch.GestureQueryStatusEventArgs)">
            <summary>
            Raises the GestureQueryStatus event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnGestureStarting(Infragistics.Win.DataVisualization.Touch.GestureStartingEventArgs)">
            <summary>
            Raises the GestureStarting event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnGestureCompleted(Infragistics.Win.DataVisualization.Touch.GestureCompletedEventArgs)">
            <summary>
            Raises the GestureCompleted event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnPanGesture(Infragistics.Win.DataVisualization.Touch.PanGestureEventArgs)">
            <summary>
            Raises the PanGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnZoomGesture(Infragistics.Win.DataVisualization.Touch.ZoomGestureEventArgs)">
            <summary>
            Raises the ZoomGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnZoomDeltaChanged(Infragistics.Win.DataVisualization.Touch.ZoomDeltaChangedEventArgs)">
            <summary>
            Raises the ZoomDeltaChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnRotateGesture(Infragistics.Win.DataVisualization.Touch.RotateGestureEventArgs)">
            <summary>
            Raises the RotateGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnPressAndTapGesture(Infragistics.Win.DataVisualization.Touch.PressAndTapGestureEventArgs)">
            <summary>
            Raises the PressAndTapGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnTwoFingerTapGesture(Infragistics.Win.DataVisualization.Touch.TwoFingerTapGestureEventArgs)">
            <summary>
            Raises the TwoFingerTapGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnPressAndHoldGesture(Infragistics.Win.DataVisualization.Touch.PressAndHoldGestureEventArgs)">
            <summary>
            Raises the PressAndTapGesture event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.OnPressAndHoldDrag(Infragistics.Win.DataVisualization.Touch.PressAndHoldDragEventArgs)">
            <summary>
            Raises the PressAndHoldDrag event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.Dispose">
            <summary>
            Cleans up any resources currently in use.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.Enabled">
            <summary>
            Returns or sets a boolean value indicating whether gesture
            messages are processed. Setting this property to false
            short-circuits all gesture handling.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.GestureQueryStatus">
            <summary>
            Occurs when the user makes contact with the touch surface.
            Listeners can register the gesture events they want to receive.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.GestureStarting">
            <summary>
            Occurs when system has identified the gesture and subsequently
            issues the first notification for it.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.GestureCompleted">
            <summary>
            Occurs when a gesture has completed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.PanGesture">
            <summary>
            Occurs as a pan gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.ZoomGesture">
            <summary>
            Occurs as a zoom gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.ZoomDeltaChanged">
            <summary>
            Occurs as a zoom gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.RotateGesture">
            <summary>
            Occurs as a rotate gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.PressAndTapGesture">
            <summary>
            Occurs as a press-and-tap gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.TwoFingerTapGesture">
            <summary>
            Occurs as a two-finger tap gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.PressAndHoldGesture">
            <summary>
            Occurs as a press-and-hold tap gesture is performed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Touch.GestureNativeWindow.PressAndHoldDrag">
            <summary>
            Occurs as a pan gesture is performed, if the gesture was initiated
            by a press and hold gesture.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Point">
            <summary>
            Represents an ordered pair of double x and y coordinates that defines
            a point in a two-dimensional plane.
            </summary>
            <remarks>
            <p class="body">
            This structure supports bi-directional conversion for the following types:
            <ul>
                <li>System.Drawing.Point</li>
                <li>System.Drawing.PointF</li>
            </ul>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.ShouldSerializeX">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.Point.X">X</see>
            property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.ResetX">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.Point.X">X</see>
            property to its default.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.ShouldSerializeY">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.Point.Y">Y</see>
            property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.ResetY">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.Point.Y">Y</see>
            property to its default.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.Reset">
            <summary>
            Resets all properties of this structure to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the specified object are equal
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Equality(Infragistics.Win.DataVisualization.Point,Infragistics.Win.DataVisualization.Point)">
            <summary>
            Overrides the == operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Inequality(Infragistics.Win.DataVisualization.Point,Infragistics.Win.DataVisualization.Point)">
            <summary>
            Overrides the != operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Equality(Infragistics.Win.DataVisualization.Point,System.Drawing.Point)">
            <summary>
            Overrides the == operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Inequality(Infragistics.Win.DataVisualization.Point,System.Drawing.Point)">
            <summary>
            Overrides the != operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Equality(Infragistics.Win.DataVisualization.Point,System.Drawing.PointF)">
            <summary>
            Overrides the == operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Inequality(Infragistics.Win.DataVisualization.Point,System.Drawing.PointF)">
            <summary>
            Overrides the != operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Implicit(System.Drawing.Point)~Infragistics.Win.DataVisualization.Point">
            <summary>
            Returns a Infragistics.DataVisualization.Point instance from the specified System.Drawing.Point instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Implicit(System.Drawing.PointF)~Infragistics.Win.DataVisualization.Point">
            <summary>
            Returns a Infragistics.DataVisualization.Point instance from the specified System.Drawing.PointF instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Point.op_Implicit(Infragistics.Win.DataVisualization.Point)~System.Drawing.Point">
            <summary>
            Returns a System.Drawing.Point instance from the specified Infragistics.DataVisualization.Point instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Point.Empty">
            <summary>
            Represents point that has X and Y values set to zero.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Point.X">
            <summary>
            Returns or sets the x-coordinate of this point.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Point.Y">
            <summary>
            Returns or sets the y-coordinate of this point.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Point.IsEmpty">
            <summary>
            Returns a boolean value indicating whether this point is empty.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Rectangle">
            <summary>
            Stores a set of four double-precision values that represent
            the size and location of a rectangle.
            </summary>
            <remarks>
            <p class="body">
            This structure supports bi-directional conversion for the following types:
            <ul>
                <li>System.Drawing.Rectangle</li>
                <li>System.Drawing.RectangleF</li>
            </ul>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.#ctor(Infragistics.Win.DataVisualization.Point,System.Drawing.SizeF)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.#ctor(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Creates a new instance of this structure.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ShouldSerializeX">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.X">X</see>
            property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ResetX">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.X">X</see>
            property to its default.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ShouldSerializeY">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.Y">Y</see>
            property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ResetY">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.Y">Y</see>
            property to its default.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ShouldSerializeWidth">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.Width">Width</see>
            property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ResetWidth">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.Width">Width</see>
            property to its default.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ShouldSerializeHeight">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.Height">Height</see>
            property requires serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ResetHeight">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.Rectangle.Height">Height</see>
            property to its default.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Reset">
            <summary>
            Resets all properties of this structure to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Intersect(Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Replaces this rectangle with the intersection of itself and the specified rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Intersect(Infragistics.Win.DataVisualization.Rectangle,Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Returns the intersection of the two specified rectangles.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.IntersectsWith(Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Returns a boolean value indicating whether the specified Rectangle
            intersects with this rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Union(Infragistics.Win.DataVisualization.Rectangle,Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Returns the union of the two specified rectangles.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Contains(Infragistics.Win.DataVisualization.Point)">
            <summary>
            Returns a boolean value indicating whether the specified point
            is contained within the bounds of this rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Contains(Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Returns a boolean value indicating whether the specified rectangle
            is contained within the bounds of this rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the specified object are equal
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Equality(Infragistics.Win.DataVisualization.Rectangle,Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Overrides the == operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Inequality(Infragistics.Win.DataVisualization.Rectangle,Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Overrides the != operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Equality(Infragistics.Win.DataVisualization.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Overrides the == operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Inequality(Infragistics.Win.DataVisualization.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Overrides the != operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Equality(Infragistics.Win.DataVisualization.Rectangle,System.Drawing.RectangleF)">
            <summary>
            Overrides the == operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Inequality(Infragistics.Win.DataVisualization.Rectangle,System.Drawing.RectangleF)">
            <summary>
            Overrides the != operator
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Implicit(System.Drawing.Rectangle)~Infragistics.Win.DataVisualization.Rectangle">
            <summary>
            Returns a DataVisualization.Rectangle instance from the specified System.Drawing.Rectangle instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Implicit(System.Drawing.RectangleF)~Infragistics.Win.DataVisualization.Rectangle">
            <summary>
            Returns a DataVisualization.Rectangle instance from the specified System.Drawing.RectangleF instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Implicit(Infragistics.Win.DataVisualization.Rectangle)~System.Drawing.RectangleF">
            <summary>
            Returns a System.Drawing.RectangleF instance from the specified DataVisualization.Rectangle instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Rectangle.op_Implicit(Infragistics.Win.DataVisualization.Rectangle)~System.Drawing.Rectangle">
            <summary>
            Returns a System.Drawing.Rectangle instance from the specified DataVisualization.Rectangle instance.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Empty">
            <summary>
            Returns a Rectangle with the X, Y, Width, and Height properties initialized to zero.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.X">
            <summary>
            Returns or sets the x-coordinate of the upper-left coordinate of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Y">
            <summary>
            Returns or sets the y-coordinate of the upper-left coordinate of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Width">
            <summary>
            Returns or sets the width of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Height">
            <summary>
            Returns or sets the height of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Left">
            <summary>
            Returns the x-coordinate of the left edge of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Top">
            <summary>
            Returns the y-coordinate of the top edge of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Right">
            <summary>
            Returns the x-coordinate of the right edge of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.Bottom">
            <summary>
            Returns the y-coordinate of the bottom edge of this rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Rectangle.IsEmpty">
            <summary>
            Returns a boolean value indicating whether this rectangle is empty.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Style">
            <summary>
            Defines properties allowing you to modify the appearance of the element
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ShouldSerializeFill">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.DataVisualization.Style.Fill"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.Fill"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ResetFill">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.DataVisualization.Style.Fill"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.Fill"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ShouldSerializeStroke">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.DataVisualization.Style.Stroke"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.Stroke"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ResetStroke">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.DataVisualization.Style.Stroke"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.Stroke"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ShouldSerializeStrokeThickness">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.DataVisualization.Style.StrokeThickness"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.StrokeThickness"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ResetStrokeThickness">
            <summary>
            Resets the <see cref="P:Infragistics.Win.DataVisualization.Style.StrokeThickness"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.StrokeThickness"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ShouldSerializeOpacity">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.DataVisualization.Style.Opacity"/> property needs to be serialized.
            </summary>
            <returns>A boolean indicating if the property needs to be serialized.</returns>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.Opacity"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.ResetOpacity">
            <summary>
            Resets the <see cref="P:Infragistics.Win.DataVisualization.Style.Opacity"/> property to its default value.
            </summary>
            <seealso cref="P:Infragistics.Win.DataVisualization.Style.Opacity"/>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Style.OnPropertyChanged(System.String)">
            <summary>
            Notify the listeners that a property has been changed
            </summary>
            <param name="propertyName"> The property which was changed</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Style.Fill">
            <summary>
            Gets or sets the brush which determines the fill color of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Style.Stroke">
            <summary>
            Gets or sets the brush which determines the stroke color of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Style.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Style.Opacity">
            <summary>
            Gets or sets the opacity of the element.
            </summary>
        </member>
        <member name="E:Infragistics.Win.DataVisualization.Style.PropertyChanged">
            <summary>
            Event that notifies the listeners that a property has changed
            </summary>
        </member>
        <member name="T:Infragistics.WindowsForms.WindowsForms.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogDialogTitle">
            <summary>
              Looks up a localized string similar to About {0}.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogExpirationHeader">
            <summary>
              Looks up a localized string similar to EXPIRATION.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLicenseDescriptionBeta">
            <summary>
              Looks up a localized string similar to Beta.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLicenseDescriptionBetaExpired">
            <summary>
              Looks up a localized string similar to Beta Expired.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLicenseDescriptionLicensed">
            <summary>
              Looks up a localized string similar to Licensed.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLicenseDescriptionTrial">
            <summary>
              Looks up a localized string similar to Trial.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLicenseDescriptionTrialExpired">
            <summary>
              Looks up a localized string similar to Trial Expired.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLicenseDescriptionUnknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLink2Header">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLink2URL">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogLink2URLDisplayText">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogOkCaption">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogProductInformationHeader">
            <summary>
              Looks up a localized string similar to Product Information.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogProductKeyHeader">
            <summary>
              Looks up a localized string similar to PRODUCT KEY.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogRegisteredToHeader">
            <summary>
              Looks up a localized string similar to REGISTERED TO.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogStatusHeader">
            <summary>
              Looks up a localized string similar to STATUS.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogVersionHeader">
            <summary>
              Looks up a localized string similar to VERSION.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.AboutDialogVisitUsAtHeader">
            <summary>
              Looks up a localized string similar to Visit us at.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_About_GraceExpired">
            <summary>
              Looks up a localized string similar to Licensed - Activation grace period expired.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_About_InGrace">
            <summary>
              Looks up a localized string similar to Licensed - In activation grace period.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration1">
            <summary>
              Looks up a localized string similar to Activation Grace Period Expired.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration10">
            <summary>
              Looks up a localized string similar to Insufficient Security Permissions.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration2">
            <summary>
              Looks up a localized string similar to Trial Period Expired.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration3">
            <summary>
              Looks up a localized string similar to Beta Period Expired.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration4">
            <summary>
              Looks up a localized string similar to {0} usage days / {1} calendar weeks.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration5">
            <summary>
              Looks up a localized string similar to N/A.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration6">
            <summary>
              Looks up a localized string similar to Invalid License Information.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration7">
            <summary>
              Looks up a localized string similar to Incomplete License Info.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration8">
            <summary>
              Looks up a localized string similar to {Error}.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LDR_UltraProdInfo_Expiration9">
            <summary>
              Looks up a localized string similar to Product Not Installed Properly.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_ArgumentException_18">
            <summary>
              Looks up a localized string similar to codePrefix.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_ArgumentException_19">
            <summary>
              Looks up a localized string similar to Invalid cdkey..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_ArgumentNullException_178">
            <summary>
              Looks up a localized string similar to A valid &apos;Graphics&apos; object must be specified..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_ArgumentNullException_2">
            <summary>
              Looks up a localized string similar to type.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_ArgumentNullException_3">
            <summary>
              Looks up a localized string similar to assembly.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_NotSupportedException_0">
            <summary>
              Looks up a localized string similar to About dialog can only be used for Infragistics controls.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_NotSupportedException_1">
            <summary>
              Looks up a localized string similar to About dialog can only be used for licensed Infragistics controls.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LE_NotSupportedException_17">
            <summary>
              Looks up a localized string similar to UltraLicenseAttributeBase can only be used for Infragistics controls.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicensedProductActivationGracePrompt">
            <summary>
              Looks up a localized string similar to The non-activated usage period for {2} will expire after {0} usage day(s) or {1} calendar week(s), whichever comes first.  You need to activate this product using the Product Activation Wizard..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicensedProductPromptDialogTitle">
            <summary>
              Looks up a localized string similar to Infragistics {0}.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicensedProductTrialPeriodPrompt">
            <summary>
              Looks up a localized string similar to This trial version of {2} will expire after {0} usage day(s) or {1} calendar week(s), whichever comes first..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionBetaExpired">
            <summary>
              Looks up a localized string similar to {0} Beta expired on {1}.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionGracePeriodExpired">
            <summary>
              Looks up a localized string similar to 
            		{0} {1}
            		You need to activate this product using the Product Activation Wizard.
            	.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionIncomplete">
            <summary>
              Looks up a localized string similar to Incomplete license information.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionInformationNotFound">
            <summary>
              Looks up a localized string similar to No license information found.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionInvalidCDKey">
            <summary>
              Looks up a localized string similar to Invalid license information.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionSecurityPermission">
            <summary>
              Looks up a localized string similar to Insufficient security permissions to determine license status..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionTrialExpired">
            <summary>
              Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionUnlicensed">
            <summary>
              Looks up a localized string similar to Product not licensed.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LicenseExceptionUnlicensedProgram">
            <summary>
              Looks up a localized string similar to This program was created using an unlicensed (demo) copy of {0}.  Please contact the author/vendor of the application..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.LinearGradientBrush_Exception_BetweenZeroAndOne">
            <summary>
              Looks up a localized string similar to The value specified is outside the valid range of values. Specify a value between zero and one, inclusive..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Style_Fill_Property">
            <summary>
              Looks up a localized string similar to Gets or sets the brush which determines the fill color of the element..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Style_Opacity_OutOfRangeException">
            <summary>
              Looks up a localized string similar to The Opacity must be a number between 0 and 1.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Style_Opacity_Property">
            <summary>
              Looks up a localized string similar to Gets or sets the opacity of the element..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Style_Stroke_Property">
            <summary>
              Looks up a localized string similar to Gets or sets the brush which determines the stroke color of the element..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Style_StrokeThickness_OutOfRangeException">
            <summary>
              Looks up a localized string similar to The StrokeThickness can&apos;t be negative value.
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.Style_StrokeThickness_Property">
            <summary>
              Looks up a localized string similar to Gets or sets the stroke thickness of the element..
            </summary>
        </member>
        <member name="P:Infragistics.WindowsForms.WindowsForms.Strings.TrialKey_AboutDialogLabel">
            <summary>
              Looks up a localized string similar to {Trial}.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DefaultTooltipControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Win.DataVisualization.DefaultTooltipControl"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DefaultTooltipControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.DefaultTooltipControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DefaultTooltipControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.DefaultTooltipControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.IAnnotationLayerOwner">
            <summary>
            For Infragistics internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TooltipForm.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TooltipForm.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipForm.DisplayShadow">
            <summary>
            Determines if a drop shadow is displayed beneath the tooltip.
            </summary>
            <remarks>
            <p class="note"><b>Note</b> The shadow is displayed by default when available. The shadow is 
            only available on operating systems that support shadows and when unmanaged code rights have 
            been assigned to the assembly.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipForm.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipFormEx.CreateParams">
            <summary>
            CreateParams
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipFormEx.IsFullTrust">
            <summary>
            Returns true if the window was created in a full trust environment. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.TooltipShowingEventArgs">
            <summary>
            Provides data for the TooltipShowing event.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TooltipShowingEventArgs.#ctor">
            <summary>
            Creates an instance of the TooltipEventArgs.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TooltipShowingEventArgs.#ctor(Infragistics.Win.DataVisualization.TooltipSettings)">
            <summary>
            Creates an instance of the TooltipEventArgs and accepts an instance of the TooltipSettings object.
            </summary>
            <param name="tooltipSettings">The TooltipSettings to use.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipShowingEventArgs.TooltipSettings">
            <summary>
            Gets or Sets the TooltipSettings.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Utilities">
            <summary>
            Utility class containing static helper functions
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Utilities.ScreenFromPoint(Infragistics.Win.DataVisualization.Point)">
            <summary>
            Returns the screen containing the largest portion or closest to the
            specified <see cref="T:Infragistics.Win.DataVisualization.Point"/>
            </summary>
            <param name="point">Point in screen coordinates</param>
            <returns>The screen that contains or is closest to the specified rect</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Utilities.GetDistance(Infragistics.Win.DataVisualization.Point,Infragistics.Win.DataVisualization.Point)">
            <summary>
            Returns the distance between two points.		
            </summary>						
            <param name="pointA">The first <see cref="T:Infragistics.Win.DataVisualization.Point"/>.</param>
            <param name="pointB">The second Point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Utilities.CanAssert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.TooltipSettings">
            <summary>
            This class contains settings relevant to the Tooltips.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.TooltipSettings.Reset">
            <summary>
            Resets all the Tooltip settings back to the default values.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipSettings.BackColor">
            <summary>
            Gets or sets the BackColor of the Tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipSettings.ForeColor">
            <summary>
            Gets or sets the ForeColor of the Tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipSettings.TransparencyKey">
            <summary>
            Gets or sets the Color to use as the Transparency Key for the Tooltip's Form.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipSettings.DisplayShadow">
            <summary>
            Gets or sets whether to display a drop shadow behind the Tooltip's Form.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.TooltipSettings.Opacity">
            <summary>
            Gets or sets the opacity of the Tooltip's Form.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Brush">
            <summary>
            Defines objects used to paint graphical objects.
            Classes that derive from Brush describe how the area is painted. 
            </summary>
            <seealso cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</seealso>
            <seealso cref="T:Infragistics.Win.DataVisualization.LinearGradientBrush">LinearGradientBrush</seealso>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Brush.op_Implicit(Infragistics.Portable.Graphics.Media.Brush)~Infragistics.Win.DataVisualization.Brush">
            <summary>
            Returns a DataVisualization.Brush instance from the specified Media.Brush instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Brush.op_Implicit(Infragistics.Win.DataVisualization.Brush)~Infragistics.Portable.Graphics.Media.Brush">
            <summary>
            Returns a Media.Brush instance from the specified DataVisualization.Brush instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Brush.op_Implicit(System.Drawing.Brush)~Infragistics.Win.DataVisualization.Brush">
            <summary>
            Returns an Infragistics.Win.DataVisualization.Brush instance initialized
            from the specified System.Drawing.Brush.
            </summary>
            <param name="source">
            The System.Drawing.Brush instance from which to initialize the new brush.
            </param>
            <returns>
            <p class="body">
            If the specified source brush is a System.Drawing.SolidBrush, a new
            <see cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</see>
            is returned.
            </p>
            <p class="body">
            If the specified source brush is a System.Drawing.Drawing2D.LinearGradientBrush, a new
            <see cref="T:Infragistics.Win.DataVisualization.LinearGradientBrush">LinearGradientBrush</see>
            is returned.
            </p>
            <p class="body">
            Specifying any other type for the source parameter causes a NotSupportedException to be thrown.
            </p>
            </returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Brush.op_Implicit(System.Drawing.Color)~Infragistics.Win.DataVisualization.Brush">
            <summary>
            Creates a new
            <see cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</see>
            from the specified color.
            </summary>
            <param name="color">
            The initial value of the brush's
            <see cref="P:Infragistics.Win.DataVisualization.SolidColorBrush.Color">Color</see>
            property.
            </param>
            <returns>
            A new
            <see cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</see>
            instance.
            </returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.GradientBrush">
            <summary>
            An abstract class that describes a gradient, composed of gradient stops.
            Classes that inherit from GradientBrush describe different ways of interpreting gradient stops. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientBrush.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientBrush.#ctor(Infragistics.Win.DataVisualization.GradientStopCollection)">
            <summary>
            Creates a new instance of this class with the specified
            <see cref="T:Infragistics.Win.DataVisualization.GradientStopCollection">GradientStopCollection</see>
            </summary> 
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientBrush.ShouldSerializeGradientStops">
            <summary>
            Returns a boolean value indicating whether the GradientStops collection
            requires serialization.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientBrush.GradientStops">
            <summary>
            Returns or sets the brush's gradient stops.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.GradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStop.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStop.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStop.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientStop.Offset">
            <summary>
            Gets the location of the gradient stop within the gradient vector.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientStop.Color">
            <summary>
            Returns or sets the color of this GradientStop.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.GradientStop.GradientStopTypeConverter">
            <summary>
            Type converter for the GradientStop class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStop.GradientStopTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>CanConvertTo</summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStop.GradientStopTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>ConvertTo</summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.GradientStopCollection">
            <summary>
            Represents a collection of GradientStop objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStopCollection.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStopCollection.Add(Infragistics.Win.DataVisualization.GradientStop)">
            <summary>
            Adds the specified
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            instance to this collection.
            </summary>
            <param name="item">
            The
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            to add.
            </param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStopCollection.Add(System.Drawing.Color,System.Double)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            to this collection with the specified property values.
            </summary>
            <param name="color">
            The initial value of the
            <see cref="P:Infragistics.Win.DataVisualization.GradientStop.Color">Color</see>
            property.
            </param>
            <param name="offset">
            The initial value of the
            <see cref="P:Infragistics.Win.DataVisualization.GradientStop.Offset">Offset</see>
            property.
            </param>
            <returns>
            A reference to the
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            that was added to the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStopCollection.Remove(Infragistics.Win.DataVisualization.GradientStop)">
            <summary>
            Removes the specified
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            from this collection.
            </summary>
            <param name="item">
            A reference to the
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            to be removed.
            </param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStopCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            instance at the specified ordinal position from this collection.
            </summary>
            <param name="index">
            The index of the
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            to be removed.
            </param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.GradientStopCollection.Clear">
            <summary>
            Removes all items from this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientStopCollection.Item(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.Win.DataVisualization.GradientStop">GradientStop</see>
            at the specified index.
            </summary>
            <param name="index">The index of the item to return.</param>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientStopCollection.Count">
            <summary>
            Returns the number of items in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientStopCollection.Colors">
            <summary>
            Returns the
            <see cref="P:Infragistics.Win.DataVisualization.GradientStop.Color">Color</see>
            of each item in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.GradientStopCollection.Offsets">
            <summary>
            Returns the
            <see cref="P:Infragistics.Win.DataVisualization.GradientStop.Offset">Offset</see>
            of each item in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.LinearGradientBrush">
            <summary>
            Paints an area with a linear gradient.
            </summary>
            <remarks>
            <p class="body">
            This class supports bi-directional conversion for the following types:
            <ul>
                <li>System.Drawing.Drawing2D.LinearGradientBrush</li>
            </ul>
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LinearGradientBrush.DefaultStartPoint">
            <summary>
            Returns the default value of the
            <see cref="P:Infragistics.Win.DataVisualization.LinearGradientBrush.StartPoint">StartPoint</see>
            property (0, 0).
            </summary>
        </member>
        <member name="F:Infragistics.Win.DataVisualization.LinearGradientBrush.DefaultEndPoint">
            <summary>
            Returns the default value of the
            <see cref="P:Infragistics.Win.DataVisualization.LinearGradientBrush.EndPoint">EndPoint</see>
            property (1, 0).
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.#ctor(Infragistics.Win.DataVisualization.GradientStopCollection)">
            <summary>
            Creates a new instance of this class using the specified
            <see cref="T:Infragistics.Win.DataVisualization.GradientStopCollection">GradientStopCollection</see>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.#ctor(System.Drawing.Color,System.Drawing.Color,Infragistics.Win.DataVisualization.Point,Infragistics.Win.DataVisualization.Point)">
            <summary>
            Initializes a new instance of the LinearGradientBrush class
            that has the specified start color, end color, start point, and end point.
            </summary>
            <param name="startColor">The color at offset 0.0.</param>
            <param name="endColor">The color at offset 1.0.</param>
            <param name="startPoint">The start point of the gradient.</param>
            <param name="endPoint">The start point of the gradient.</param>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.#ctor(System.Nullable{Infragistics.Win.DataVisualization.Point},System.Nullable{Infragistics.Win.DataVisualization.Point},System.Drawing.Color[],System.Double[])">
            <summary>
            Used for designer serialization.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ShouldSerializeStartPoint">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.LinearGradientBrush.StartPoint">StartPoint</see>
            property has been explicitly set.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ResetStartPoint">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.LinearGradientBrush.StartPoint">StartPoint</see>
            property to its default setting.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ShouldSerializeEndPoint">
            <summary>
            Returns a boolean value indicating whether the
            <see cref="P:Infragistics.Win.DataVisualization.LinearGradientBrush.EndPoint">EndPoint</see>
            property has been explicitly set.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ResetEndPoint">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.Win.DataVisualization.LinearGradientBrush.EndPoint">EndPoint</see>
            property to its default setting.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ToBrush(Infragistics.Win.DataVisualization.LinearGradientBrush,Infragistics.Win.DataVisualization.Rectangle)">
            <summary>
            Returns a
            System.Drawing.Drawing2D.LinearGradientBrush initialized from the specified
            Infragistics.Portable.Graphics.Media.LinearGradientBrush instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ToBrush(Infragistics.Portable.Graphics.Media.LinearGradientBrush,System.Drawing.RectangleF,System.Single)">
            <summary>
            Returns a
            System.Drawing.Drawing2D.LinearGradientBrush initialized from the specified
            Infragistics.Portable.Graphics.Media.LinearGradientBrush instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.ToBrush">
            <summary>
            Returns an Infragistics.Portable.Graphics.Media.LinearGradientBrush initialized
            from this instance.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.FromBrush(System.Drawing.Drawing2D.LinearGradientBrush,System.Nullable{Infragistics.Win.DataVisualization.Point},System.Nullable{Infragistics.Win.DataVisualization.Point})">
            <summary>
            Returns a Infragistics.Win.DataVisualization.LinearGradientBrush instance initialized from the
            specified System.Drawing.Drawing2D.LinearGradientBrush instance.
            </summary>
            <param name="brush">The System.Drawing.Drawing2D.LinearGradientBrush instance from which to initialize the new Infragistics.Win.DataVisualization.LinearGradientBrush instance</param>
            <param name="startPoint">
            The start point for the gradient, or null if the default start point should be used (0, 0).
            </param>
            <param name="endPoint">
            The end point for the gradient, or null if the default end point should be used (1, 0).
            </param>
            <returns>A Infragistics.Win.DataVisualization.LinearGradientBrush instance.</returns>
            <remarks>
            <p class="body">
            The <paramref name="startPoint"/> and <paramref name="endPoint"/> parameters are necessary because
            the System.Drawing.Drawing2D.LinearGradientBrush class does not expose these values as public properties.
            </p>
            <p class="body">
            In the absence of an explicit setting, the <paramref name="startPoint"/> and <paramref name="endPoint"/>
            default to the values (0, 0) and (1, 0), respectively, which causes the gradient to progress along the
            horizontal plane from left to right.
            </p>
            <p class="body">
            The <paramref name="startPoint"/> and <paramref name="endPoint"/> parameters are used
            to specify the angle of the gradient. For example, given a startPoint of (0, 0) and an
            endPoint of (1, 1), the resulting angle is 45 degrees, producing a gradient which
            progresses in the forward diagonal direction.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.op_Implicit(Infragistics.Portable.Graphics.Media.LinearGradientBrush)~Infragistics.Win.DataVisualization.LinearGradientBrush">
            <summary>
            Creates a new Infragistics.WIn.DataVisualization.LinearGradientBrush
            from the specified 
            Infragistics.Portable.Graphics.Media.LinearGradientBrush.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.LinearGradientBrush.op_Implicit(System.Drawing.Drawing2D.LinearGradientBrush)~Infragistics.Win.DataVisualization.LinearGradientBrush">
            <summary>
            Creates a new Infragistics.Win.DataVisualization.LinearGradientBrush
            from the specified 
            System.Drawing.Drawing2D.LinearGradientBrush
            </summary>
            <remarks>
            <p class="">
            Because the System.Drawing.Drawing2D.LinearGradientBrush class does not
            publicly expose properties for the start and end points of the gradient,
            This operator ignores the start and end points of the specified LinearGradientBrush.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.LinearGradientBrush.StartPoint">
            <summary>
            Returns or sets the starting two-dimensional coordinates of the linear gradient.
            </summary>
            <remarks>
            <p class="body">
            The range of valid values for both the X and Y components is between 0.0 and 1.0, inclusive,
            and represent a vector expressed relative to the upper left corner of the area in which the
            gradient is displayed.
            </p>
            <p class="body">
            A value of zero represents the leftmost/topmost point of the area in which
            the gradient is displayed; a value of one represents the rightmost/bottommost
            point.
            </p>
            <p class="body">
            Any value between 0 and 1 is interpreted as a ratio which describes the location
            as relative to the top left corner of the area in which the gradient is displayed.
            </p>
            <p class="body">
            Any value which is less than zero or greater than one causes an exception to be thrown.
            </p>
            <p class="body">
            For example, given an area that is 100 pixels square, a value of (0.5, 0.25) coincides
            with the coordinate (50, 25).
            </p>
            <p class="body">
            In the absence of an explicit setting, the value of this property resolves to (0.0, 0.0).
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.LinearGradientBrush.EndPoint">
            <summary>
            Returns or sets the ending two-dimensional coordinates of the linear gradient.
            </summary>
            <remarks>
            <p class="body">
            The range of valid values for both the X and Y components is between 0.0 and 1.0, inclusive,
            and represent a vector expressed relative to the upper left corner of the area in which the
            gradient is displayed.
            </p>
            <p class="body">
            A value of zero represents the leftmost/topmost point of the area in which
            the gradient is displayed; a value of one represents the rightmost/bottommost
            point.
            </p>
            <p class="body">
            Any value between 0 and 1 is interpreted as a ratio which describes the location
            as relative to the top left corner of the area in which the gradient is displayed.
            </p>
            <p class="body">
            For example, given an area that is 100 pixels square, a value of (0.5, 0.25) coincides
            with the coordinate (50, 25).
            </p>
            <p class="body">
            In the absence of an explicit setting, the value of this property resolves to (1.0, 0.0).
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.SolidColorBrush">
            <summary>
            Paints an area with a solid color.
            </summary>
            <remarks>
            <p class="body">
            This class supports bi-directional conversion for the following types:
            <ul>
                <li>System.Drawing.Color</li>
                <li>System.Drawing.SolidBrush</li>
            </ul>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance of this class using the specified color
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.op_Implicit(Infragistics.Portable.Graphics.Media.Brush)~Infragistics.Win.DataVisualization.SolidColorBrush">
            <summary>
            Creates a new SolidColorBrush from the specified 
            Infragistics.Portable.Graphics.Media.Brush.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.op_Implicit(Infragistics.Win.DataVisualization.SolidColorBrush)~Infragistics.Portable.Graphics.Media.Brush">
            <summary>
            Creates a new Media.Brush from the specified 
            DataVisualization.SolidColorBrush
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.op_Implicit(System.Drawing.SolidBrush)~Infragistics.Win.DataVisualization.SolidColorBrush">
            <summary>
            Creates a new instance of this class, initialized from the specified
            System.Drawing.SolidBrush instance.
            </summary>
            <param name="source">A System.Drawing.SolidBrush instance from which to initialize from.</param>
            <returns>A new Infragistics.Win.DataVisualization instance.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.op_Implicit(System.Drawing.Color)~Infragistics.Win.DataVisualization.SolidColorBrush">
            <summary>
            Creates a new
            <see cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</see>
            from the specified color.
            </summary>
            <param name="color">
            The initial value of the brush's
            <see cref="P:Infragistics.Win.DataVisualization.SolidColorBrush.Color">Color</see>
            property.
            </param>
            <returns>
            A new
            <see cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</see>
            instance.
            </returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.SolidColorBrush.op_Implicit(Infragistics.Win.DataVisualization.SolidColorBrush)~System.Drawing.Color">
            <summary>
            Creates a new System.Drawing.Color structure from the specified
            <see cref="T:Infragistics.Win.DataVisualization.SolidColorBrush">SolidColorBrush</see>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.SolidColorBrush.Color">
            <summary>
            Returns or sets the color of this SolidColorBrush.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.BrushConverter">
            <summary>
            Type converter for Infragistics.Win.DataVisualization type.
            Supports bidirectional conversion for the string and System.Drawing.Color
            data types.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.BrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for the following types:
            <ul>
                <li>System.String</li>
                <li>System.Drawing.Color</li>
                <li>System.Drawing.SolidBrush</li>
                <li>System.Drawing.Drawing2D.LinearGradientBrush</li>
            </ul>
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.BrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a Infragistics.Portable.Graphics.Media.Color
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.BrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for typeof(string) and typeof(System.Drawing.Color)
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.BrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to string or System.Drawing.Color.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.ColorConverter">
            <summary>
            Type converter for Infragistics.Portable.Graphics.Media.Color type.
            Supports bidirectional conversion for the string and System.Drawing.Color
            data types.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for typeof(string) and typeof(System.Drawing.Color)
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a Infragistics.Portable.Graphics.Media.Color
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for typeof(string) and typeof(System.Drawing.Color)
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to string or System.Drawing.Color.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ColorConverter.ToColor(System.String)">
            <summary>
            Returns an Infragistics.Portable.Graphics.Media.Color instance
            initialized from the specified string.
            </summary>
            <param name="value">A string to be parsed into a color.</param>
            <returns>An Infragistics.Portable.Graphics.Media.Color instance</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.DoubleBasedStructConverter">
            <summary>
            Type converter for structs whose members are of type double.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.DoubleBasedStructConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for typeof(string).
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.DoubleBasedStructConverter.ParseDoubles(System.String,System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Attempts to parse the specified string into an array of double values,
            returning null if that attempt fails.
            </summary>
            <param name="s">The string to parse</param>
            <param name="r">The regular expression to use</param>
            <param name="r">The number of values expected</param>
            <returns>A PointF or null to signify failure</returns>
        </member>
        <member name="P:Infragistics.Win.DataVisualization.Design.DoubleBasedStructConverter.RegexNum">
            <summary>
            Matches on either integer or doubleing point number.
            </summary>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.ObjectConverter">
            <summary>
            TypeConverter class for converting string to object.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ObjectConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Win.DataVisualization.Design.ObjectConverter"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">A Type that represents the type you want to convert to. </param>
            <returns>True if this converter can perform the conversion; otherwise, False.</returns>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.ObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from string.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.PointConverter">
            <summary>
            Type converter for Infragistics.Win.DataVisualization.Point.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a System.Drawing.Point from the specified value,
            assumed to be a string.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a System.Drawing.Point from the specified value,
            assumed to be a string.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true for typeof(Point).
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertTo
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.PointConverter.ParsePoint(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Attempts to parse the specified string into a Point,
            returning null if that attempt fails.
            </summary>
            <param name="s">The string to parse</param>
            <param name="r">The regular expression to use</param>
            <returns>A Point or null to signify failure</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.RectangleConverter">
            <summary>
            Type converter for Infragistics.Win.DataVisualization.Rectangle.
            Supports bi-directional conversion for the following  types:
            <ul>
                <li>System.Drawing.Rectangle</li>
                <li>System.Drawing.RectangleF</li>
                <li>Infragistics.Portable.Rect</li>
            </ul>
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean value indicating whether conversion from the
            specified sourceType is supported.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a Rectangle from the specified value.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a boolean value indicating whether conversion to the
            specified destinationType is supported.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertTo
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Overridden to change the order in which the properties appear.
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.ParseRectangle(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Attempts to parse the specified string into a Rectangle,
            returning null if that attempt fails.
            </summary>
            <param name="s">The string to parse</param>
            <param name="r">The regular expression to use</param>
            <returns>A Rectangle or null to signify failure</returns>
        </member>
        <member name="T:Infragistics.Win.DataVisualization.Design.RectangleConverter.RectanglePropertyDescriptorCollection">
            <summary>
            PropertyDescriptorCollection-derived class used to prevent property sorting
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.RectanglePropertyDescriptorCollection.Sort">
            <summary>
            Sort
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.RectanglePropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
        </member>
        <member name="M:Infragistics.Win.DataVisualization.Design.RectangleConverter.RectanglePropertyDescriptorCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sort
            </summary>
        </member>
        <member name="T:Infragistics.ErrorMessageDisplayingEventArgs">
            <summary>
            Provides data for the ErrorMessageDisplaying event.
            </summary>
        </member>
        <member name="M:Infragistics.ErrorMessageDisplayingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.ErrorMessageDisplayingEventArgs"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Infragistics.ErrorMessageDisplayingEventArgs.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:Infragistics.CultureInfoHelper">
            <summary>
            Provides culture methods.
            </summary>
        </member>
        <member name="P:Infragistics.CultureInfoHelper.CultureToUse">
            <summary>
            Gets the culture to use.
            </summary>
            <value>The culture to use.</value>
        </member>
        <member name="T:Infragistics.Portable.PointCollectionUtil">
            <summary>
            General purpose utility methods for collections of points.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Infragistics.Win.DataVisualization.Point}})">
            <summary>
            Returns a Rect representing the bounds of all the points in the given list.
            </summary>
            <param name="points">A list of list of points.</param>
            <returns>A Rect representing the bounds of all given points.</returns>
            <remarks>The nested lists of points data structure corresponds to that which is used in the Shapefile format and other geospatial data sources.</remarks>
        </member>
        <member name="M:Infragistics.Portable.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{Infragistics.Win.DataVisualization.Point})">
            <summary>
            Gets the axis-aligned bounding box for the cloud of points.
            </summary>
            <param name="points"></param>
            <returns>axis-aligned bounding rectangle or Rect.Empty</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataContext">
            <summary>
            Represents the data currently in context.
            </summary>
        </member>
        <member name="T:Infragistics.IExternalizable">
            <summary>
            Indicates an object that can return an externalized version.
            </summary>
        </member>
        <member name="M:Infragistics.IExternalizable.ToExternalObject">
            <summary>
            Gets the externalized version of an object.
            </summary>
            <returns>The externalized version.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.Series">
            <summary>
            Gets the series that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.Item">
            <summary>
            Gets the item that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.ActualItemBrush">
            <summary>
            Gets the actual resolved brush in use for the item that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.Outline">
            <summary>
            Gets the outline in use for the item in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.ItemLabel">
            <summary>
            Gets the label in use for the item in context, if available.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.ItemBrush">
            <summary>
            Gets the potential brush in usage for the item in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.Thickness">
            <summary>
            Gets the thickness of the item in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.LegendLabel">
            <summary>
            Gets the legend label to use for the item in context, if available.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.DataContext.PropertyChanged">
            <summary>
            Indicates that a property has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.EasingFunctions">
            <summary>
            Represent some build in easing functions for use with the components.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.EasingFunctions.CubicEase(System.Double)">
            <summary>
            Represents a cubic in-out easing function.
            </summary>
            <param name="t">Input time</param>
            <returns>Output progress</returns>
        </member>
        <member name="M:Infragistics.Portable.EasingFunctions.ExponentialEase(System.Double)">
            <summary>
            Represents an exponential in-out easing function.
            </summary>
            <param name="t">Input time.</param>
            <returns>Output progress.</returns>
        </member>
        <member name="M:Infragistics.Portable.EasingFunctions.CircleEase(System.Double)">
            <summary>
            Represents an circle in-out easing function.
            </summary>
            <param name="t">Input time.</param>
            <returns>Output progress.</returns>
        </member>
        <member name="T:Infragistics.Portable.CustomContentUpdateInfo">
            <summary>
            Represents contextual information about the custom content being generated or updated.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.CustomContentUpdateInfo.#ctor">
            <summary>
            Constructs a CustomContentUpdateInfo.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.CustomContentUpdateInfo.GetItem(System.String)">
            <summary>
            Gets a named value from the info.
            </summary>
            <param name="key">The key for the value to retrieve.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Infragistics.Portable.CustomContentUpdateInfo.SetItem(System.String,System.Object)">
            <summary>
            Sets a named value for the info.
            </summary>
            <param name="key">The name for the value.</param>
            <param name="item">The value to set.</param>
        </member>
        <member name="T:Infragistics.Portable.InterpolationMode">
            <summary>
            Describes available modes for color interpolation.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.InterpolationMode.RGB">
            <summary>
            Interpolation in RGB space.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.InterpolationMode.HSV">
            <summary>
            Interpolation in HSV space.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ColorUtil">
            <summary>
            Utility class for color-based operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.RandomColor(System.Byte)">
            <summary>
            Returns a random color.
            </summary>
            <param name="alpha">The alpha level of the color to generate.</param>
            <returns>A random color with the specified alpha level.</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.RandomHue(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Get a random color  
            </summary>
            <param name="color">Specifies the alpha, saturation and value for the returned color</param>
            <returns>New color</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetInterpolation(Infragistics.Portable.Graphics.Media.Color,System.Double,Infragistics.Portable.Graphics.Media.Color,Infragistics.Portable.InterpolationMode)">
            <summary>
            Get an interpolation from the current color to the specified color
            </summary>
            <param name="minimum">begin color, corresponding to p=0.0</param>
            <param name="interpolation_">interpolation parameter assumed to be in [0.0, 1.0]</param>
            <param name="maximum_">end color, corresponding to p=1.0</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>new color corresponding to the specified interpolation parameter</returns>
            <remarks>
            There are always two interpolation paths for the hue, and this function
            chooses the shortest one, so for example an interpolation from red to 
            blue runs through purple, not orange, yellow and green.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetAHSVInterpolation(System.Double[],System.Double,System.Double[])">
            <summary>
            Get an interpolated color between two colors.
            </summary>
            <param name="minimum">begin color, corresponding to p=0.0</param>
            <param name="interpolation">interpolation parameter assumed to be in [0.0, 1.0]</param>
            <param name="maximum">end color, corresponding to p=1.0</param>
            <returns>new color corresponding to the specified interpolation parameter</returns>
            <remarks>
            There are always two interpolation paths for the hue, and this function
            chooses the shortest one, so for example an interpolation from red to 
            blue runs through purple, not orange, yellow and green.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetLightened(Infragistics.Portable.Graphics.Media.Color,System.Double)">
            <summary>
            Gets a new color corresponding to this color darkened or lightened by specified amount
            </summary>
            <param name="color"></param>
            <param name="interpolation">-1.0 for full darkening, to 1.0 for full lightening</param>
            <returns>new Color</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetAHSL(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Gets the ahsl components of this color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetAHSV(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Gets the ahsv components of this color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.FromAHSL(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsl components 
            </summary>
            <param name="alpha">The alpha (transparency), expressed as a value between 0 and 1, where 0 is transparent and 1 is opaque.</param>
            <param name="hue">The hue (color), expressed as a value between 0 and 1, where 0 is red, 1 is also red, and in between are orange, yellow, green, blue, indigo, and violet.</param>
            <param name="saturation">The saturation (colorfulness), expressed as a value between 0 and 1, where 0 is gray and 1 is fully saturated/colorful.</param>
            <param name="lightness">The lightness, expressed as a value between 0 and 1, where 0 is black and 1 is white.</param>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.FromAHSV(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsv components
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetRandomColor(System.Int32)">
            <summary>
            Get a random color from generated array of colors.
            </summary>
            <param name="index">The index of the color to get in the generated array.</param>
            <returns>The color in the RandomColors array at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.ColorToInt(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Converts a color to its integer representation for use in bitmaps.
            </summary>
            <param name="color">The color to convert to an integer.</param>
            <returns>The integer representation for the given color.</returns>
        </member>
        <member name="T:Infragistics.Portable.DoubleAnimator">
            <summary>
            Class for facilitating the animation of Double values.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleAnimator.Flush">
            <summary>
            Forces a tick of the animator to make sure it has ticked at least once.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleAnimator.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            DoubleAnimator constructor.
            </summary>
            <param name="from">The double value to start the animation at.</param>
            <param name="to">The double value to end the animation at.</param>
            <param name="intervalMilliseconds">The span of time it should take for the animation to complete.</param>
        </member>
        <member name="M:Infragistics.Portable.DoubleAnimator.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleAnimator.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleAnimator.Tick">
            <summary>
            Ticks the animation.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleAnimator.AnimationActive">
            <summary>
            Method which returns a boolean indicating whether or not the animation is active.
            </summary>
            <returns>True if the animation is active, otherwise False.</returns>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.TickProvider">
            <summary>
            Gets or sets the tick provider for the animation. 
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.NeedsFlush">
            <summary>
            Gets if the DoubleAnimator is in a state where it may need flushing.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.TransitionProgress">
            <summary>
            Gets the current progress of the animation.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.IntervalMilliseconds">
            <summary>
            The total number of milliseconds in the interval.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.EasingFunction">
            <summary>
            Gets or sets the easing function to use for the animation.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.From">
            <summary>
            Gets or sets the value to animate from.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.To">
            <summary>
            Gets or sets the value to animate to.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleAnimator.Active">
            <summary>
            Gets or sets whether the animation is active.
            </summary>
        </member>
        <member name="E:Infragistics.Portable.DoubleAnimator.PropertyChanged">
            <summary>
            Event raised any time a property value is changed.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.EasingFunctionHandler">
            <summary>
            Represents an easing function for an animation.
            </summary>
            <param name="time">The input type for the function between 0 and 1</param>
            <returns>The output progress (0 is beginning, 1 is end, unclamped).</returns>
        </member>
        <member name="T:Infragistics.BrushCollection">
            <summary>
            Simple collection of Brush objects
            </summary>
        </member>
        <member name="M:Infragistics.BrushCollection.SelectRandom">
            <summary>
            Returns a random brush in the collection.
            </summary>
            <returns>A random brush in this collection.</returns>
        </member>
        <member name="M:Infragistics.BrushCollection.InterpolateRandom">
            <summary>
            Returns a random brush interpolated from the brushes in this collection.
            </summary>
            <returns>A random brush interpolated from the brushes in this collection.</returns>
        </member>
        <member name="M:Infragistics.BrushCollection.GetInterpolatedBrush(System.Double)">
            <summary>
            Gets the brush at the specified index.  If index is not an integer, the result of this function call will be a brush interpolated between the brushes at the previous and following index values.
            </summary>
            <param name="index">The index of the brush to return.</param>
            <returns>The brush at the specified index, or if the specified index is not an integer, an interpolated brush between the previous and next index.</returns>
        </member>
        <member name="M:Infragistics.BrushCollection.Equals(System.Object)">
            <summary>
            Determines if a BrushCollection is equivalent to another.
            </summary>
            <param name="obj">The other BrushCollection.</param>
            <returns>True if the BrushCollections are equivalent.</returns>
        </member>
        <member name="P:Infragistics.BrushCollection.IsDirty">
            <summary>
            Indicates that a brush collection is dirty.
            </summary>
        </member>
        <member name="P:Infragistics.BrushCollection.InterpolationMode">
            <summary>
            Sets or gets the interpolation mode used to interpolate brushes.
            </summary>
        </member>
        <member name="P:Infragistics.BrushCollection.Item(System.Int32)">
            <summary>
            Gets or sets a brush at the specified index.
            </summary>
            <param name="index">The index of the brush to return.</param>
            <returns>A brush for the specified index.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.TrendCalculators">
            <summary>
            Utility class for calculating trend line values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.WMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the weighted moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The weighted moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.EMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the exponential moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.MMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the modified moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The modified moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.CMA(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the cumulative moving average.
            </summary>
            <param name="sequence">Sequence to average.</param>
            <returns>The cumulative moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.SMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the simple moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The simple moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.MovingSum(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates a moving sum over a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the moving sum.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The moving sum values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TrendCalculators.STDEV(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the standard deviation of a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the standard deviation values.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The sequence of calculated standard deviation values.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.TrendLineType">
            <summary>
            Describes available types of trend lines supported by series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.None">
            <summary>
            No trend line will be displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.LinearFit">
            <summary>
            Linear fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.QuadraticFit">
            <summary>
            Quadratic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.CubicFit">
            <summary>
            Cubic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.QuarticFit">
            <summary>
            Quartic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.QuinticFit">
            <summary>
            Quintic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.LogarithmicFit">
            <summary>
            Logarithmic fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.ExponentialFit">
            <summary>
            Exponential fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.PowerLawFit">
            <summary>
            Powerlaw fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.SimpleAverage">
            <summary>
            Simple moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.ExponentialAverage">
            <summary>
            Exponential moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.ModifiedAverage">
            <summary>
            Modified moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.CumulativeAverage">
            <summary>
            Cumulative moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TrendLineType.WeightedAverage">
            <summary>
            Weighted moving average.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.UnknownValuePlotting">
            <summary>
            Describes available methods of plotting data with unknown values in a series.  
            <para>Double.NaN and null are examples of unknown values.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.UnknownValuePlotting.LinearInterpolate">
            <summary>
            Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.UnknownValuePlotting.DontPlot">
            <summary>
            Do not plot the unknown value on the chart.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.DoubleValueChangedEventArgs">
            <summary>
            Provides data for double value change events. 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleValueChangedEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            DoubleValueChangedEventArgs constructor.
            </summary>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Portable.DoubleValueChangedEventArgs.OldValue">
            <summary>
            Gets the value before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleValueChangedEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.DoubleValueChangedEventHandler">
            <summary>
            Represents the method that will handle double value change events. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Portable.ErrorBarCalculatorReference">
            <summary>
            Describes available behaviors for choosing the direction of error bars calculation in scatter series.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorReference.X">
            <summary>
            Variable X.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorReference.Y">
            <summary>
            Variable Y.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ErrorBarCalculatorType">
            <summary>
            Describes available types of error bar calculators.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.Fixed">
            <summary>
            A calculator type that provides a fixed value.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.Percentage">
            <summary>
            A calculator type that provides a fixed percentage of each input value
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.Data">
            <summary>
            A calculator type that provides the input values directly.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.StandardDeviation">
            <summary>
            A calculator type that provides the standard deviation of the input values.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.StandardError">
            <summary>
            A calculator type that provides the standard error of the input values.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IErrorBarCalculator">
            <summary>
            The error bar calculator interface
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetCalculatorType">
            <summary>
            Gets the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetIndependentValue">
            <summary>
            Gets the independent value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetDependentValue(System.Double)">
            <summary>
            Gets the dependent value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetItemColumn">
            <summary>
            Gets the fast item column associated with this calculator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.HasConstantPosition">
            <summary>
            Determines whether the position is constant.
            </summary>
            <returns>
            	<c>true</c> if position is constant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetPosition">
            <summary>
            Gets the position.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Infragistics.Portable.IErrorBarCalculator.Changed">
            <summary>
            Event raised when a property of the calculator has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.FastItemsSourceEventAction">
            <summary>
            Describes available actions that can cause a DataSource event. 
            </summary>
        </member>
        <member name="F:Infragistics.Portable.FastItemsSourceEventAction.Remove">
            <summary>
            One or more rows were removed from the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.FastItemsSourceEventAction.Insert">
            <summary>
            One or more rows were added to the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.FastItemsSourceEventAction.Replace">
            <summary>
            One or more rows were replaced in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.FastItemsSourceEventAction.Change">
            <summary>
            An item property value changed in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.FastItemsSourceEventAction.Reset">
            <summary>
            The entire data source contents were reset.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.FastItemsSourceEventArgs">
            <summary>
            Provides data for the CollectionChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSourceEventArgs.#ctor(Infragistics.Portable.FastItemsSourceEventAction,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="position"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSourceEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="propertyName"></param>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSourceEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSourceEventArgs.Position">
            <summary>
            Gets the position of the modified rows.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSourceEventArgs.Count">
            <summary>
            Gets the number of modified rows.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSourceEventArgs.PropertyName">
            <summary>
            Gets the name of the modified property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PropertyUpdatedEventArgs">
            <summary>
            EventArgs class for property updated events.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PropertyUpdatedEventArgs.PropertyName">
            <summary>
            Name of the property being updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PropertyUpdatedEventArgs.OldValue">
            <summary>
            Old or previous value of the property being updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PropertyUpdatedEventArgs.NewValue">
            <summary>
            New or current value of the property being updated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PropertyUpdatedEventHandler">
            <summary>
            EventHandler delegate for property updated events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The PropertyUpdatedEventArgs in context.</param>
        </member>
        <member name="T:Infragistics.Portable.RectChangedEventArgs">
            <summary>
            Provides data for rectangle changed events. 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectChangedEventArgs.#ctor(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            RectChangedEventArgs constructor.
            </summary>
            <param name="oldRect">The previous value of the rectangle which is changing.</param>
            <param name="newRect">The new value of the rectangle which is changing.</param>
        </member>
        <member name="P:Infragistics.Portable.RectChangedEventArgs.OldRect">
            <summary>
            Gets the rectangle before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.RectChangedEventArgs.NewRect">
            <summary>
            Gets the new rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.RectChangedEventHandler">
            <summary>
            Represents the method that will handle rectangle changed events. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.InteractionState">
            <summary>
            Describes available interaction states of the chart or geographic map control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.None">
            <summary>
            User gesture will not change the state of the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.DragZoom">
            <summary>
            User gesture will start a drag rectangle to zoom the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.DragPan">
            <summary>
            User gesture will start a pan action to move the chart's window.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.InteractionState.Auto">
            <summary>
            User gesture will start a pan action in a touch environment and a drag rectangle in a mouse environment.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ArrayUtil">
            <summary>
            Utility class for array operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the contents of the current IList object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.InsertionIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the insertion index for an element in a sorted list.
            </summary>
            <remarks>
            The list must be sorted in ascending order prior to calling this method. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="value"></param>
            <returns>Insertion index for the specified value.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.InsertionIndex``1(System.Collections.Generic.IList{``0},System.Comparison{``0},``0)">
            <summary>
            Returns the insertion index for an element in a sorted list.
            </summary>
            <remarks>
            The list must be sorted according to the specified comparison
            prior to calling this method. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="comparison"></param>
            <param name="value"></param>
            <returns>Insertion index for the specified value.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.BinarySearch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Conducts a binary search for a value in the list using a given comparison function.
            </summary>
            <typeparam name="T">The Type of items in the list.</typeparam>
            <param name="list">The list of items to search.</param>
            <param name="comparisonFunction">A comparison function used for finding the target item in the list.</param>
            <returns>The index of the found item in the list.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.BinarySearch``1(Infragistics.Portable.IIndexedPool{``0},System.Func{``0,System.Int32})">
            <summary>
            Conducts a binary search for a value in the indexed pool using a given comparison function.
            </summary>
            <typeparam name="T">The Type of items in the pool.</typeparam>
            <param name="list">The pool of items to search.</param>
            <param name="comparisonFunction">A comparison function used for finding the target item in the pool.</param>
            <returns>The index of the found item in the pool.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.ElementAtMod``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets an element at modulus index of list or null if the list is null or empty   
            </summary>  
        </member>
        <member name="T:Infragistics.Portable.CoreGeometryUtil">
            <summary>
            Utility class for geometry operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.CoreGeometryUtil.SimplifyAngle(System.Double)">
            <summary>
            Simplifies an angle to a value between 0 and 360.
            </summary>
            <param name="angle">The angle to simplified.</param>
            <returns>The angle, simplified to a value between 0 and 360.</returns>
        </member>
        <member name="M:Infragistics.Portable.CoreGeometryUtil.GetCenterFromArcSegment(Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets center from arc segment 
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Extensions">
            <summary>
            Class containing extension methods used by Infragistics Data Visualization.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Extensions.Reset(Infragistics.Portable.Graphics.Media.PathGeometry)">
            <summary>
            Resets the given PathGeometry.
            </summary>
            <param name="geom">The PathGeometry to reset.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.Reset(Infragistics.Portable.Graphics.Media.GeometryGroup)">
            <summary>
            Resets the given GeometryGroup.
            </summary>
            <param name="geom">The GeometryGroup to reset.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.Detach(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Detaches the given FrameworkElement from the visual tree.
            </summary>
            <param name="child">The FrameworkElement to detach from the visual tree.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.TransferChildrenTo(Infragistics.Portable.Components.UI.Controls.Panel,Infragistics.Portable.Components.UI.Controls.Panel)">
            <summary>
            Transfers all of a Panel's Children to another Panel.
            </summary>
            <param name="from">The Panel to transfer Children from.</param>
            <param name="to">The Panel to transfer Children to.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.IsPlottable(Infragistics.Portable.Point)">
            <summary>
            Determines if a Point is within the range of plottable points.
            </summary>
            <param name="point">The Point under observation.</param>
            <returns>True if the given point is plottable, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Portable.Extensions.IsPlottable(Infragistics.Portable.Rect)">
            <summary>
            Determines if a Rect is within plottable range.
            </summary>
            <param name="rect">The Rect under observation.</param>
            <returns>True if the Rect is plottable, otherwise False.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ILegendSeries">
            <summary>
            A series that can display in a legend.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ILegendSeries.ResolveLegendIndex">
            <summary>
            Returns the index to use in the legend.
            </summary>
            <returns>The index to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ILegendSeries.ForSubItems(System.Action{System.Object})">
            <summary>
            Execute an action for the sub items of the item.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.Container">
            <summary>
            The owning legend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.IsStacked">
            <summary>
            Gets if the legend item is a stacked item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.IsVertical">
            <summary>
            Gets if the legend item is a vertical item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.IsUsableInLegend">
            <summary>
            Gets if the item is usable in a legend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.HasSubItems">
            <summary>
            Gets if the item has subitems.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendSeries.HasMarkers">
            <summary>
            Gets if the item has markers.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ILegendOwner">
            <summary>
            An owner of a legend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ILegendOwner.Name">
            <summary>
            Gets the name of the legend owner.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.IChartLegend">
            <summary>
            A legend used for charting.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IChartLegend.ContainsChild(System.Object)">
            <summary>
            Returns if the provided child is present in the legend.
            </summary>
            <param name="child">The child to check for.</param>
            <returns>True, if the child is in the legend.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.IChartLegend.RemoveChild(System.Object)">
            <summary>
            Removes a child from the legend.
            </summary>
            <param name="child">The child to remove</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.IChartLegend.AddChildInOrder(System.Object,Infragistics.Controls.Charts.ILegendSeries)">
            <summary>
            Adds a child, in order, to the legend.
            </summary>
            <param name="legendItem">The legend item.</param>
            <param name="series">The owning series.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.IChartLegend.ClearLegendItemsForSeries(Infragistics.Controls.Charts.ILegendSeries)">
            <summary>
            Clears all items from the legend for a given series.
            </summary>
            <param name="series">The series to clear legend items for.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.IChartLegend.SeriesOwner">
            <summary>
            Gets the series the owns the legend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.IChartLegend.ChartOwner">
            <summary>
            Gets the chart that owns the legend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.IChartLegend.IsItemwise">
            <summary>
            Gets if the legend is item-wise.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.IChartLegend.IsScale">
            <summary>
            Gets if the legend is a scale legend.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Controls.InterpolationUtil">
            <summary>
            Provides utility methods for interpolating points.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.InterpolationUtil.InterpolatePoints(System.Collections.Generic.List{Infragistics.Portable.Point},System.Double,System.Collections.Generic.List{Infragistics.Portable.Point},System.Collections.Generic.List{Infragistics.Portable.Point})">
            <summary>
            Interpolates points
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.InterpolationUtil.InterpolateValues``1(System.Collections.Generic.List{``0},System.Double,System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0},System.Func{System.Double,System.Double,``0,``0,``0})">
            <summary>
            Interpolates values
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit">
            <summary>
            Methods for linear least squares fitting.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Controls.Charts.Util.Numeric">
            <summary>
            Base class for algorithms which work on indexed series of numbers.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.#ctor">
            <summary>
            Creates and initialises a default, empty Numeric object.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Solve(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Solve a linear tridiagonal matrix system
            </summary>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Solve(System.Double[0:,0:],System.Double[])">
            <summary>
            Solve a system of linear equations using gauss-jordan eliminiation
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.SafeCubicSplineFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for cubic spline interpolation
            of the tabultated function represented by Count, x, y.
            </summary>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <remarks>
            The presence of double.NaN in the input will result in local double.NaN
            in the output.
            </remarks>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.CubicSplineFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for natural or clamped cubic spline interpolation
            of the tabultated function represented by x, y.
            </summary>
            <remarks>
            The presence of double.NaN in the input will result in completely invalid output.
            </remarks>
            <param name="start">The index of the first sample.</param>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.CubicSplineFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for natural or clamped cubic spline interpolation
            of the tabultated function represented by x, y.
            </summary>
            <remarks>
            The presence of double.NaN in the input will result in completely invalid output.
            </remarks>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.CubicSplineEvaluate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates a cubic spline interpolation
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Spline2D(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Returns a 2D spline fitting of the data.
            </summary>
            <param name="count">The number of points being inputted.</param>
            <param name="x">Provides the X input values based on index.</param>
            <param name="y">Provides the Y input values based on index.</param>
            <param name="stiffness">The spline stiffness parameter to use.</param>
            <returns>The path figure collection representing the fitted spline.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Spline2D(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Returns a 2D spline fitting of the data.
            </summary>
            <param name="startIndex">The index to start from.</param>
            <param name="endIndex">The ending index.</param>
            <param name="x">Provides the X input values based on index.</param>
            <param name="y">Provides the Y input values based on index.</param>
            <param name="stiffness">The spline stiffness parameter to use.</param>
            <returns>The path figure collection representing the fitted spline.</returns>
        </member>
        <member name="T:Infragistics.Portable.Controls.Charts.Util.Numeric.ComparableDelegate">
            <summary>
            Delegate which returns an indexed comparable.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.Test">
            <summary>
            Runs the built-in test suite.
            </summary>
            <returns>true if all tests pass</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LinearFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the linear least squares fit y=A+Bx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFitting.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LinearEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LinearTest">
            <summary>
            Tests linear fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LogarithmicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the logarithmic least squares fit y=A+Blnx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the x is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Logarithmic." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LogarithmicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*ln(x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LogarithmicTest">
            <summary>
            Tests logarithmic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.ExponentialFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the exponential least squares fit y=Ae^(Bx)
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the y is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Exponential." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingExponential.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.ExponentialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*e^(a[1]*x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.ExponentialTest">
            <summary>
            Tests exponential fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PowerLawFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the power law least squares fit y=A(x^B)
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Power Law." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PowerLawEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*(a[1]^x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PowerLawTest">
            <summary>
            Tests power law fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuadraticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuadraticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuadraticTest">
            <summary>
            Tests quadratic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.CubicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.CubicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.CubicTest">
            <summary>
            Tests cubic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuarticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuarticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuarticTest">
            <summary>
            Tests quartic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuinticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4+a5x^5
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuinticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuinticTest">
            <summary>
            Tests quintic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PolynomialFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2..
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="k">Polynomial order.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in significant numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PolynomialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+ .. +a[n-1]*x^[n-1]
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PolynomialTest(System.Int32)">
            <summary>
            Tests polynomial fitting.
            </summary>
            <param name="k">Polynomial order to test.</param>
            <returns>true if tests pass.</returns>
        </member>
        <member name="T:Infragistics.Portable.MathUtil">
            <summary>
            Provides utility methods for math operations.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.MathUtil.DegreeAsRadian">
            <summary>
            Constant used for converting degrees to radians.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.MathUtil.PHI">
            <summary>
            Represents the golden mean.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.MathUtil.SQRT2">
            <summary>
            Represents the square root of 2.0
            </summary>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Asinh(System.Double)">
            <summary>
            Returns the inverse hyperbolic sine of the specified angle.
            </summary>
            <param name="angle">An angle, measured in radians</param>
            <returns>Inverse hyperbolic sine of the specified angle.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Hypot(System.Double,System.Double)">
            <summary>
            Calculates the length of the hypotenuse of a right-angled triangle based
            on the lengths of two sides x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Sqr(System.Double)">
            <summary>
            Calculates the square of a x.
            </summary>
            <param name="x"></param>
            <returns>The square of x</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of the gamma function, Γ(x).
            </summary>
            <param name="x">The value for which you want to calculate GammaLn.</param>
            <returns>The logarithm of the gamma function, NaN for x less than or equal to zero.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns the specified value clamped to the specified range.
            </summary>
            <param name="value">Value to clamp.</param>
            <param name="minimum">Range minimum.</param>
            <param name="maximum">Range maximum.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Radians(System.Double)">
            <summary>
            Converts the specified angle to radians.
            </summary>
            <param name="degrees">Angle in degrees.</param>
            <returns>Angle as radians.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Degrees(System.Double)">
            <summary>
            Converts the specified angle to degrees.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Angle as degrees.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Noise(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Perlin noise value at the specified location.
            </summary>
            <param name="x">x location in noise space</param>
            <param name="y">y location in noise space</param>
            <param name="z">z location in noise space</param>
            <returns>Noise value.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.NiceFloor(System.Double)">
            <summary>
            Returns a nicely rounded value less than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.NiceRound(System.Double)">
            <summary>
            Rounds a decimal value to the nearest nice number.
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.NiceCeiling(System.Double)">
            <summary>
            Returns a nicely rounded value greater than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Min3(System.Double,System.Double,System.Double)">
            <summary>
            Returns minimum of the given three numeric values
            </summary>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Max3(System.Double,System.Double,System.Double)">
            <summary>
            Returns maximum of the given three numeric values
            </summary>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Min(System.Double[])">
            <summary>
            Returns minimum of the given numeric parameters.
            </summary>
            <param name="a">The numeric parameters from which to return the minimum value.</param>
            <returns>The lowest of the given numeric parameters.</returns>
        </member>
        <member name="M:Infragistics.Portable.MathUtil.Max(System.Double[])">
            <summary>
            Returns maximum of the given numeric parameters.
            </summary>
            <param name="a">The numeric parameters from which to return the maximum value.</param>
            <returns>The highest of the given numeric parameters.</returns>
        </member>
        <member name="T:Infragistics.Portable.Pool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">Pooled object type. Must be nullable</typeparam>
        </member>
        <member name="T:Infragistics.Portable.IIndexedPool`1">
            <summary>
            An IPool that is indexed by integer indexes.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="T:Infragistics.Portable.IPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="M:Infragistics.Portable.IPool`1.Clear">
            <summary>
            Clear the values from the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IIndexedPool`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="M:Infragistics.Portable.Pool`1.#ctor">
            <summary>
            Constructs a new Pool instance.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Pool`1.Clear">
            <summary>
            Clears the items from the pool.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Pool`1.DoToAll(System.Action{`0})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Item(System.Int32)">
            <summary>
            Gets the indexed item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="index"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Count">
            <summary>
            Gets or sets the count of the items that are in the pool.
            </summary>
            <remarks>
            Setting the count to less than the current value will result in pool
            items automatically being deactivated.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Active">
            <summary>
            The list of active objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Inactive">
            <summary>
            The list of inactive objects.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IHashPool`2">
            <summary>
            An hash mapped IPool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.Portable.IHashPool`2.Item(`0)">
            <summary>
            Gets the item for the specified key.
            </summary>
            <param name="key">The key for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="T:Infragistics.Portable.HashPool`2">
            <summary>
            An implementation of a hash mapped pool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.#ctor">
            <summary>
            Constructs a new HashPool instance.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.IsActiveKey(`0)">
            <summary>
            Returns whether the provided key is in the active set.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key is in the active set.</returns>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.Remove(`0)">
            <summary>
            Removes the item with the provided key from the pool.
            </summary>
            <param name="key">The key for the item to remove.</param>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.Clear">
            <summary>
            Clears the items from the hash pool.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.DoToAll(System.Action{`1})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Inactive">
            <summary>
            The inactive members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Active">
            <summary>
            The active members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Item(`0)">
            <summary>
            Gets the requested item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="key"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.ActiveKeys">
            <summary>
            Gets the keys of the active pool objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.ActiveCount">
            <summary>
            Gets the count of the number of actives.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.RearrangedList`1">
            <summary>
            List class for known lists which are reordered.
            </summary>
            <typeparam name="T">The Type of items in the list.</typeparam>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            RearrangedList constructor.
            </summary>
            <param name="inner">The original list.</param>
            <param name="indexes">A list of indices, representing the order of items in the RearrangedList.</param>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.IndexOf(`0)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="item">The item under observation.</param>
            <returns>The index of the given item.</returns>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>        
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.Contains(`0)">
            <summary>
            Checks whether or not the item is present in the collection.
            </summary>
            <param name="item">The item under observation.</param>
            <returns>True if the item is present in the collection, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items in the collection to the array, starting at the specified index.
            </summary>
            <param name="array">The array to add collection items to.</param>
            <param name="arrayIndex">The index at which to start the copy operation.</param>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Portable.RearrangedList`1.GetEnumerator">
            <summary>
            Gets the enumerator for iterating through all items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Portable.RearrangedList`1.Item(System.Int32)">
            <summary>
            RearrangedList indexer.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Infragistics.Portable.RearrangedList`1.Count">
            <summary>
            The total number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.RearrangedList`1.IsReadOnly">
            <summary>
            Boolean indicating whether or not the collection is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.RectUtil">
            <summary>
            Utility class for rectangle-based calculations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetCenter(Infragistics.Portable.Rect)">
            <summary>
            Gets the center of the current rectangle
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>Center point</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetArea(Infragistics.Portable.Rect)">
            <summary>
            Calculates the area of the current rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>The area of the current rectangle.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Duplicate(Infragistics.Portable.Rect)">
            <summary>
            Create a clone of the current rectangle
            </summary>
            <param name="rect"></param>
            <returns>A clone of the current rectangle</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetLeader(Infragistics.Portable.Rect,Infragistics.Portable.Point)">
            <summary>
            Gets the attachment point on the current rectangle for the leader line
            to the specified anchor.
            </summary>
            <remarks>
            If the anchor lies within the current rectangle, the anchor is returned.  
            </remarks>
            <param name="rect">Area to join to the anchor</param>
            <param name="anchor">Anchor to join to the rectangle</param>
            <returns>Attachment point.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetDistanceSquared(Infragistics.Portable.Rect,Infragistics.Portable.Point)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified point. 
            </summary>
            <remarks>
            If the point lies within the current rectangle, the separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="pt">Point to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetDistanceSquared(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified rectangle. 
            </summary>
            <remarks>
            If the rectangles intersect, their separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="rc">Rectangle to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetDistanceSquared(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified point. 
            </summary>
            <param name="rc">Current rectangle.</param>
            <param name="X">Point X coordinate.</param>
            <param name="Y">Point Y coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Contains(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Indicates whether the current rectangle wholly contains the specified rectangle.
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">Rectangle to test for strict inclusion</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.IntersectsWith(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle. 
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>true if the specified rectangle intersects with the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.IntersectionArea(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Calculates the area of intersection between the specified rectangle and the current rectangle
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>The area of intersection or 0.0 if the rectangles do not intersect.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetInflated(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Expands or shrinks the current rectangle by using the specified width and height
            amounts, in all directions. The
            size and position of the current rectangle are not changed.
            </summary>
            <remarks>
            The Width of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the Height of the resulting rectangle is increased or
            decreased by twice the specified height.
            <para>
            If the specified width or height shrink the rectangle by more than its current
            Width or Height—giving the rectangle a negative area—the rectangle becomes the
            Empty rectangle.
            </para>
            </remarks>
            <param name="rect"></param>
            <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
            <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
            <returns>Inflated rectangle.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.InflateBy(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Inflate(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Inflate(Infragistics.Portable.Rect,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Round(Infragistics.Portable.Rect)">
            <summary>
            Rounds the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.IsNull(Infragistics.Portable.Rect)">
            <summary>
            Determines whether the current rectangle is null.
            </summary>
            <param name="rect">The rect.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Infragistics.Portable.Rect"/> is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Size(Infragistics.Portable.Rect)">
            <summary>
            Returns size dimensions of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Normalize(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Normalize current rectangle to dimensions of other rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Normalize(Infragistics.Portable.Rect,Infragistics.Portable.Size)">
            <summary>
            Normalize current rectangle to dimensions of size object
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetTopLeft(Infragistics.Portable.Rect)">
            <summary>
            Returns Top Left point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetTopRight(Infragistics.Portable.Rect)">
            <summary>
            Returns Top Right point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetBottomLeft(Infragistics.Portable.Rect)">
            <summary>
            Returns Bottom Left point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetBottomRight(Infragistics.Portable.Rect)">
            <summary>
            Returns Bottom Right point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetCorners(Infragistics.Portable.Rect)">
            <summary>
            Returns corner points of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.RotateAboutCenter(Infragistics.Portable.Rect,System.Double)">
            <summary>
            Returns bounds of rotated rectangle around center of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.RotateAboutPoint(Infragistics.Portable.Rect,System.Double,System.Double,System.Double)">
            <summary>
            Returns bounds of rotated rectangle around specified point
            </summary>
        </member>
        <member name="T:Infragistics.Portable.StackPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Portable.StackPool`1.Pop">
            <summary>
            Gets an object from the pool.
            </summary>
            <remarks>
            The pool will either Create a new object or Activate one which was previously returned
            and Disactivated. If DeferDisactivate is set there may be pending active objects
            available which will be reused directly).
            </remarks>
            <returns>An object.</returns>
        </member>
        <member name="M:Infragistics.Portable.StackPool`1.Push(`0)">
            <summary>
            Returns an object to the pool for recycling.
            </summary>
            <remarks>
            All references to objects which have been returned to the pool should be destroyed. 
            <para>
            When an object is returned to the pool it will be immediately Disactivated (unless
            DeferDisactivate is set) and may also be Destroyed either immediately or some time
            later. 
            </para>
            </remarks>
            <param name="t"></param>
        </member>
        <member name="F:Infragistics.Portable.StackPool`1.active">
            <summary>
            The active object collection.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.StackPool`1.limbo">
            <summary>
            The limbo object collection.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.StackPool`1.inactive">
            <summary>
            The inactive object collection.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.DeferDisactivate">
            <summary>
            Sets or gets the DeferDisactivate flag.
            </summary>
            <remarks>
            When the pool is marked to defer disactivation, objects returned to the pool are
            not immediately disactivated, instead remaining in a limbo state where they are
            available for reuse without Activation. Resetting DeferDisactivate causes all of 
            these limbo objects to be disactivated and potentially destroyed.
            <para>
            Deferred disactivation is useful where the activation/disactivation cycle is costle
            (such as add/remove a VisualElement from a ParentItem Panel).
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.ActiveCount">
            <summary>
            Gets the number of active items in the current StackPool object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.InactiveCount">
            <summary>
            Gets the number of inactive (not including limbo) items in the
            current StackPool object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Deactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.IExecutionContext">
            <summary>
            Represents an execution context upon which work can be synchronized.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.IExecutionContext.Execute(Infragistics.Controls.ExecutionContextExecuteCallback)">
            <summary>
            Executes the requested callback on the context.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:Infragistics.Controls.IExecutionContext.EnqueueAction(Infragistics.Controls.ExecutionContextExecuteCallback)">
            <summary>
            Enqueues the requested callback on the context to be executed at earliest opportunity.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:Infragistics.Controls.IExecutionContext.EnqueueAnimationAction(Infragistics.Controls.ExecutionContextExecuteCallback)">
            <summary>
            Enqueues the requested callback on the context to be executed at earliest opportunity, to be used for animation.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:Infragistics.Controls.IExecutionContext.ExecuteDelayed(Infragistics.Controls.ExecutionContextExecuteCallback,System.Int32)">
            <summary>
            Enqueues the requested callback on the context to be executed after at least the specified delay.
            </summary>
            <param name="callback">The callback to execute.</param>
            <param name="delayMilliseconds">The delay to wait.</param>
        </member>
        <member name="M:Infragistics.Controls.IExecutionContext.GetCurrentRelativeTime">
            <summary>
            Gets the current relative time in milliseconds that has elapsed since the execution context was created.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.ExecutionContextExecuteCallback">
            <summary>
            Represents a callback to perfom action syncrhonized with an exeuction context.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Controls.SyncableObservableCollection`1">
            <summary>
            An observable collection that can sync with another.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Portable.Controls.SyncableObservableCollection`1.#ctor">
            <summary>
            Constructs a SyncableObservableCollection.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Controls.SyncableObservableCollection`1.SyncTarget">
            <summary>
            Gets or sets another SyncableObservableColleciton to sync with.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.IVisualData">
            <summary>
            Interface implemented by classes that expose visual information
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.IVisualData.Serialize">
            <summary>
            Serializes the visual data to string format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PrimitiveVisualDataList">
            <summary>
            Provides information about primitive visual elements.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualDataList.ContainingTag(System.String)">
            <summary>
            Returns the items matching the categorical tag.
            </summary>
            <param name="tag">The tag to match.</param>
            <returns>The returned visual data.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualDataList.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LabelAppearanceData">
            <summary>
            Describes appearance information about a label.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LabelAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Text">
            <summary>
            Text of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.HorizontalAlignment">
            <summary>
            Horizontal Alignment of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.VerticalAlignment">
            <summary>
            Vertical Alignment of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.TextAlignment">
            <summary>
            Alignment of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.TextWrapping">
            <summary>
            Wrapping of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.TextPosition">
            <summary>
            Position of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.LabelBrush">
            <summary>
            Label brush.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.LabelBrushExtended">
            <summary>
            Label brush.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Angle">
            <summary>
            Angle of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Opacity">
            <summary>
            Opacity of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Visibility">
            <summary>
            Visibility of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Font">
            <summary>
            Font of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontFamily">
            <summary>
            Font family of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontSize">
            <summary>
            Font Size  of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontWeight">
            <summary>
            Font Weight of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontStyle">
            <summary>
            Font Style of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontStretch">
            <summary>
            Font Stretch of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginLeft">
            <summary>
            Gets or sets left Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginRight">
            <summary>
            Gets or sets right Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginTop">
            <summary>
            Gets or sets top Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginBottom">
            <summary>
            Gets or sets bottom Margin of the label
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.VisualDataPixelScalingOptions">
            <summary>
            Optiosn for how the pixel scaling should be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LabelAppearanceDataList">
            <summary>
            Describes appearance information about a list of labels.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LabelAppearanceDataList.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.BrushAppearanceData">
            <summary>
            Describes appearance information about Brush data
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BrushAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.BrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.ColorData">
            <summary>
            Describes appearance information about a color
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ColorData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.RectData">
            <summary>
            Describes appearance information about a rect
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectData.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a RectData.
            </summary>
            <param name="left">The left value.</param>
            <param name="top">The top value.</param>
            <param name="width">The width value.</param>
            <param name="height">The height value.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.IsEmpty">
            <summary>
            Gets whether the rect is empty.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Empty">
            <summary>
            Gets an empty rect.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PointData">
            <summary>
            Describes appearance information about a rect
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PointData.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a point data.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PointData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PointData.Equals(System.Object)">
            <summary>
            Gets if this point is equal to another.
            </summary>
            <param name="obj">Other point.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PointData.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PointData.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.SizeData">
            <summarHeight>
            Describes appearance information about a rect
            </summarHeight>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SizeData.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a SizeData
            </summary>
            <param name="width">The width to use.</param>
            <param name="height">The height to use.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SizeData.Serialize">
            <summarHeight>
            Serializes the current object to a string
            </summarHeight>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SizeData.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SizeData.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.SolidBrushAppearanceData">
            <summary>
            Describes appearance information about Solid Brush data
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SolidBrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SolidBrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SolidBrushAppearanceData.ColorValue">
            <summary> Gets or sets the Color of Brush data </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData">
            <summary>
            Describes appearance information about Linear Gradient Brush data
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.#ctor">
            <summary>
            Creates an instance of Brush data
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.StartX">
            <summary> Gets or sets the StartX of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.StartY">
            <summary> Gets or sets the StartY of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.EndX">
            <summary> Gets or sets the EndX of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.EndY">
            <summary> Gets or sets the EndY of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.Stops">
            <summary>
            Gets or sets the Gradient Stops
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.GradientStopAppearanceData">
            <summary>
            Describes appearance information about Gradient Stop.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GradientStopAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GradientStopAppearanceData.ColorValue">
            <summary>
            The color of the Gradient Stop
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GradientStopAppearanceData.Offset">
            <summary>
            The Offset of the Gradient Stop
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PrimitiveAppearanceData">
            <summary>
            Describes appearance information about a primitive element.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Stroke">
            <summary>
            The stroke color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.StrokeExtended">
            <summary>
            The stroke color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Fill">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.FillExtended">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.StrokeThickness">
            <summary>
            The thickness of the stroke of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.IsVisible">
            <summary>
            Whether the primitive is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Opacity">
            <summary>
            The opacity of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.CanvasLeft">
            <summary>
            The left position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.CanvasTop">
            <summary>
            The top position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.CanvaZIndex">
            <summary>
            The z index of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.DashArray">
            <summary>
            Stroke dash array of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.DashCap">
            <summary>
            The value of the line dash cap.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.GetPointsSettings">
            <summary>
            Describes how point saliency is determined.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GetPointsSettings.IgnoreFigureStartPoint">
            <summary>
            Describes whether the start element of shapes should be ignored due to duplicate points.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PrimitiveVisualData">
            <summary>
            Describes information about a primitive visual element.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.#ctor">
            <summary>
            Constructs a PrimitiveVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.#ctor(System.String)">
            <summary>
            Constructs a primitive visual element.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.GetPoints(Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Gets the salient points associated with this visual element.
            </summary>
            <param name="settings">Describes how point saliency should be determined.</param>
            <returns>Groupings of points associated with the element.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Appearance">
            <summary>
            The visual appearance of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Tags">
            <summary>
            Information tags that categorize the intent of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Type">
            <summary>
            The type of the visual element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Name">
            <summary>
            The name of the visual element.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.RectangleVisualData">
            <summary>
            Describes visual information for a rectangle visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.#ctor">
            <summary>
            Constructs a RectangleVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Rectangle)">
            <summary>
            Constructs a RectangleVisualData based on a source Rectangle.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="rect">The source Rectangle.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.RadiusX">
            <summary>
            X-radius of the ellipse used to round corners.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.RadiusY">
            <summary>
            Y-radius of the ellipse used to round corners.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.ShapeTags">
            <summary>
            Represents categorical information to provide context for a visual element.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LineVisualData">
            <summary>
            Describes visual information for a line visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.#ctor">
            <summary>
            Constructs a LineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Line)">
            <summary>
            Constructs a LineVisualData based on a source Line.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Line.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.X1">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.Y1">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolyLineVisualData">
            <summary>
            Describes visual information for a polyline visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.#ctor">
            <summary>
            Constructs a PolyLineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Polyline)">
            <summary>
            Constructs a PolyLineVisualData based on a source Polyline.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Polyline.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyLineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyLineVisualData.Points">
            <summary>
            The points in the polyline.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolygonVisualData">
            <summary>
            Describes visual information for a polygon visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.#ctor">
            <summary>
            Constructs a PolygonVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Polygon)">
            <summary>
            Constructs a PolygonVisualData based on a source Polygon.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="polygon"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolygonVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolygonVisualData.Points">
            <summary>
            The points in the polygon.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PathVisualData">
            <summary>
            Describes visual information for a path visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.#ctor">
            <summary>
            Constructs a PathVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Path)">
            <summary>
            Constructs a PathVisualData based on a source Path.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="path">The source Path.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Line)">
            <summary>
            Constructs a PathVisualData based on a source Line.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Line.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathVisualData.Data">
            <summary>
            The data in the path.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.GeometryData">
            <summary>
            Describes visual information for a geometry visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PathGeometryData">
            <summary>
            Describes visual information for a path geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.#ctor">
            <summary>
            Constructs a PathGeometryData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathGeometryData.Figures">
            <summary>
            The figures in the path.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LineGeometryData">
            <summary>
            Describes visual information for a line geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.X1">
            <summary>
            The x position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.Y1">
            <summary>
            The y position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.RectangleGeometryData">
            <summary>
            Describes visual information for a rectangle geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.X">
            <summary>
            The x position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Y">
            <summary>
            The y position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.EllipseGeometryData">
            <summary>
            Describes visual information for an ellipse geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.EllipseGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.EllipseGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.EllipseGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.CenterX">
             <summary>
             The x coordinate of the center of the ellipse.
             </summary>
            
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.CenterY">
            <summary>
            The y coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.RadiusX">
            <summary>
            The x radius of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.RadiusY">
            <summary>
            The y radius of the ellipse.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PathFigureData">
            <summary>
            Describes visual information for a path figure.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.#ctor">
            <summary>
            Constructs a PathFigureData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.#ctor(Infragistics.Portable.Graphics.Media.PathFigure)">
            <summary>
            Constructs a PathFigureData based on a source PathFigure.
            </summary>
            <param name="fig">The source PathFigure.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.Serialize">
            <summary>
            Serialize this object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathFigureData.StartPoint">
            <summary>
            The start point of the path.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathFigureData.Segments">
            <summary>
            The segments in the path.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.SegmentData">
            <summary>
            Describes visual information for a segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LineSegmentData">
            <summary>
            Describes visual information for a line segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.#ctor">
            <summary>
            Constructs a LineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.#ctor(Infragistics.Portable.Graphics.Media.LineSegment)">
            <summary>
            Constructs a LineSegmentData based on a source LineSegment.
            </summary>
            <param name="seg">The source LineSegment.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineSegmentData.Point">
            <summary>
            The end point of the line segment.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolylineSegmentData">
            <summary>
            Describes visual information for a polyline segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.#ctor(Infragistics.Portable.Graphics.Media.PolyLineSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolylineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolylineSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.BezierSegmentData">
            <summary>
            Information data about a bezier  segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.#ctor(Infragistics.Portable.Graphics.Media.BezierSegment)">
            <summary>
            Constructs a BezierSegmentData based on a source BezierSegment.
            </summary>
            <param name="segment">The source BezierSegment.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.BezierSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.BezierSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolyBezierSegmentData">
            <summary>
            Information data about a bezier spline segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.#ctor(Infragistics.Portable.Graphics.Media.PolyBezierSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyBezierSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyBezierSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.ArcSegmentData">
            <summary>
            Information data about an arc segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.#ctor">
            <summary>
            Constructs an ArcSegmentData
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.#ctor(Infragistics.Portable.Graphics.Media.ArcSegment)">
            <summary>
            Constructs an ArcSegmentData based on a source arc.
            </summary>
            <param name="arc">The arc to extract data from.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.SerializeOverride">
            <summary>
            Overrides serialization of this object
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.Type">
            <summary>
            The type of this data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.Point">
            <summary>
            The center point of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.IsLargeArc">
            <summary>
            Whether the arc is a large arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.IsCounterClockwise">
            <summary>
            The sweep direction of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.SizeX">
            <summary>
            The x size os the arg.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.SizeY">
            <summary>
            The y size of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.RotationAngle">
            <summary>
            The rotation angle of the arc.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.AppearanceHelper">
            <summary>
            Assists in storing information about chart visual appearance.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromBrush(Infragistics.Portable.Graphics.Media.Brush)">
            <summary>
            Returns the color from a brush.
            </summary>
            <param name="b">The brush to extract the color from.</param>
            <returns>The returned color.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromBrushExtended(Infragistics.Portable.Graphics.Media.Brush)">
            <summary>
            Gets brush appearance data from brush object
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetCanvasLeft(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Gets the left position of an element.
            </summary>
            <param name="visual">The element to get the left position of.</param>
            <returns>The left position.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetCanvasTop(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Gets the top position of an element.
            </summary>
            <param name="visual">The element to get the top position of.</param>
            <returns>The top position.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetCanvasZIndex(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Gets the z-index of an element.
            </summary>
            <param name="line">The element to get the z index of</param>
            <returns>The z index of the element.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromPathData(Infragistics.Portable.Graphics.Shapes.Path)">
            <summary>
            Gets the geometry data for a path.
            </summary>
            <param name="path">The path to get data for.</param>
            <returns>The geometry data for a path.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromLineData(Infragistics.Portable.Graphics.Shapes.Line)">
            <summary>
            Gets the geometry data for a line.
            </summary>
            <param name="line">The line to get data for.</param>
            <returns>The geometry data for a line.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromGeometry(Infragistics.Portable.Graphics.Media.Geometry)">
            <summary>
            Gets data about the provided geometry.
            </summary>
            <param name="data">The geometry to get data for.</param>
            <returns>The list of geometry data extracted.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetShapeAppearance(Infragistics.Portable.VisualData.PrimitiveAppearanceData,Infragistics.Portable.Graphics.Shapes.Shape)">
            <summary>
            Gets appearance information for a shape.
            </summary>
            <param name="appearance">The appearance information to populate.</param>
            <param name="path">The shape from which to get information.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromTextElement(Infragistics.Portable.Components.UI.FrameworkElement,Infragistics.Portable.FontInfo)">
            <summary>
            Gets appearance information from a text element.
            </summary>
            <param name="frameworkElement">The text element to examine.</param>
            <param name="fontInfo">The font info to examine</param>
            <returns>The label appearance information obtained.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.SerializeItems(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{Infragistics.Portable.VisualData.IVisualData},System.Boolean)">
            <summary>
            Serializes the items into the specified string builder.
            </summary>
            <param name="sb">The string builder into which the item information should be added</param>
            <param name="name">The name of the property that returns the items</param>
            <param name="items">The collection of items to be serialized</param>
            <param name="isFirst">First if a leading comma isn't needed</param>
            <returns>Returns true if the items were added to the string building; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.SerializeItem(System.Text.StringBuilder,System.String,Infragistics.Portable.VisualData.IVisualData,System.Boolean)">
            <summary>
            Serializes the item into the specified string builder.
            </summary>
            <param name="sb">The string builder into which the item information should be added</param>
            <param name="name">The name of the property that returns the items</param>
            <param name="item">The item to be serialized</param>
            <param name="isFirst">First if a leading comma isn't needed</param>
            <returns>Returns true if the item was added to the string building; otherwise false is returned.</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.ArcGISOnlineTileSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapTileSource">
            <summary>
            Represents a specialised multiscale tile source used by the XamMap control.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.XamMultiScaleTileSource">
            <summary>
             Used to specify the source of Multi scale images
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            XamMultiScaleTileSource constructor.
            </summary>
            <param name="imageWidth">The width of the Deep Zoom image.</param>
            <param name="imageHeight">The height of the Deep Zoom image.</param>
            <param name="tileWidth">The width of the tiles in the Deep Zoom image.</param>
            <param name="tileHeight">The height of the tiles in the Deep Zoom image.</param>
            <param name="tileOverlap">How much the tiles in the Deep Zoom image overlap.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Gets a collection of the tiles.
            </summary>
            <param name="tileLevel">Level of the tile.</param>
            <param name="tilePositionX">X-coordinate position of the tile.</param>
            <param name="tilePositionY">Y-coordinate position of the tile.</param>
            <param name="tileImageLayerSources">Source of the tile image layer.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleTileSource.InvalidateTileLayer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invalidates specified tile layers.
            </summary>
            <param name="level">The level.</param>
            <param name="tilePositionX">The tile position X.</param>
            <param name="tilePositionY">The tile position Y.</param>
            <param name="tileLayer">The tile layer.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.ImageWidth">
            <summary>
            The width of the Deep Zoom image.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.ImageHeight">
            <summary>
            The height of the Deep Zoom image.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.TileWidth">
            <summary>
            The width of the tiles in the Deep Zoom image.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.TileHeight">
            <summary>
            The height of the tiles in the Deep Zoom image. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleTileSource.TileOverlap">
            <summary>
            How much the tiles in the Deep Zoom image overlap.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapTileSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            MapTileSource constructor.
            </summary>
            <param name="imageWidth">The width of the Deep Zoom image.</param>
            <param name="imageHeight">The height of the Deep Zoom image.</param>
            <param name="tileWidth">The width of the tiles in the Deep Zoom image.</param>
            <param name="tileHeight">The height of the tiles in the Deep Zoom image.</param>
            <param name="tileOverlap">How much the tiles in the Deep Zoom image overlap.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.MapServerUriProperty">
            <summary>
            Identifies the MapServerUriProperty property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.IsMapPublicProperty">
            <summary>
            Identifies the IsMapPublic property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.LevelOfDetailProperty">
            <summary>
            Identifies the LevelOfDetailProperty property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ArcGISOnlineTileSource.UserTokenProperty">
            <summary>
            Identifies the UserTokenProperty property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ArcGISOnlineTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Overridden method for getting a geographic imagery tile at specific position of the map
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.MapServerUri">
            <summary>
            Gets or sets the map server uri.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.IsMapPublic">
            <summary>
            Gets or sets the IsMapPublic flag.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.LevelOfDetail">
            <summary>
            Gets or sets the Levels of Detail.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ArcGISOnlineTileSource.UserToken">
            <summary>
            Gets or sets the User Token.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.BingMapsTileSource">
            <summary>
            Represents a BingMaps ImageTileSource
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.BingMapsTileSource"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.#ctor(System.String,System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.BingMapsTileSource"/> class.
            </summary>        
            <param name="tilePath">Tile image Uri.</param>
            <param name="subDomains">Collection of image Uri subdomains.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.BingMapsTileSource.TilePathProperty">
            <summary>
            Identifies the TilePath property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.BingMapsTileSource.SubDomainsProperty">
            <summary>
            Identifies the SubDomainsProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.BingMapsTileSource.CultureNameProperty">
            <summary>
            Identifies the CultureName property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Gets a collection of the tiles.
            </summary>
            <param name="tileLevel">Level of the tile.</param>
            <param name="tilePositionX">X-coordinate position of the tile.</param>
            <param name="tilePositionY">Y-coordinate position of the tile.</param>
            <param name="tileImageLayerSources">Source of the tile image layer.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.BingMapsTileSource.GetQuadKey(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the quadkey from tile position and level.
            </summary>
            <param name="tileLevel">Level of the tile.</param>
            <param name="tilePositionX">X-coordinate position of the tile.</param>
            <param name="tilePositionY">Y-coordinate position of the tile.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.BingMapsTileSource.TilePath">
            <summary>
            Gets or sets the map tile image uri.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.BingMapsTileSource.SubDomains">
            <summary>
            Gets or sets the collection of image uri subdomains.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.BingMapsTileSource.CultureName">
            <summary>
            Gets or sets the culture name for this tile source.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.CloudMadeTileSource">
            <summary>
            Represents a Cloud Made Image Tile Source
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CloudMadeTileSource.#ctor">
            <summary>
            Constructs a new custom tile source from a CloudMade image set.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CloudMadeTileSource.KeyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CloudMadeTileSource.Key"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CloudMadeTileSource.ParameterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CloudMadeTileSource.Parameter"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CloudMadeTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Adds the URI for the specified tile to the given list.
            </summary>
            <param name="tileLevel">The tile's hierarchy level.</param>
            <param name="tilePositionX">The tile's horizontal position.</param>
            <param name="tilePositionY">The tile's vertical position.</param>
            <param name="tileImageLayerSources">The output list of tile URIs.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.CloudMadeTileSource.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CloudMadeTileSource.Parameter">
            <summary>
            The CloudMade parameter, which can be used to select the style of tile images to return.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.OpenStreetMapTileSource">
            <summary>
            Represents an Open Street Map image tile source
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.OpenStreetMapTileSource.#ctor">
            <summary>
            Constructs a new custom tile source from a OpenStreetMap image set.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.OpenStreetMapTileSource.GetTileLayers(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Object})">
            <summary>
            Adds the URI for the specified tile to the given list.
            </summary>
            <param name="tileLevel">The tile's hierarchy level.</param>
            <param name="tilePositionX">The tile's horizontal position.</param>
            <param name="tilePositionY">The tile's vertical position.</param>
            <param name="tileImageLayerSources">The output list of tile URIs.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.OpenStreetMapTileSource.SetTilePathUrl(System.String)">
            <summary>
            Sets the tile path URL.
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:Infragistics.Controls.Charts.Triangle">
            <summary>
            Class representing a triangle in a triangulation.
            </summary>
            <remarks>
            The three vertex properties should point to the indices of Points in a known list.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Triangle.V1">
            <summary>
            Vertex one.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Triangle.V2">
            <summary>
            Vertex two.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Triangle.V3">
            <summary>
            Vertex three.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.TriangulationSource">
            <summary>
            Class for creating, loading, and storing triangulations.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.TriangulationSource.Create(System.Int32,System.Func{System.Int32,Infragistics.Portable.Point},System.Func{System.Int32,System.Single})">
            <summary>
            Creates a TriangulationSource using delegates to get the Points and Values to create a triangulation from.
            </summary>
            <param name="count">The number of total points which a triangulation will be created from.</param>
            <param name="getXY">The delegate used to get a point at a given index.</param>
            <param name="getValue">The delegate used to get a numeric value at a given index.</param>
            <returns>A TriangulationSource created using the given delegates.</returns>
            <remarks>This operation is highly CPU-intensive and could take a long time to execute.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.TriangulationSource.LoadItf(System.IO.BinaryReader)">
            <summary>
            Creates a TriangulationSource from an ITF.
            </summary>
            <param name="reader">The BinaryReader which will be used to read the ITF.</param>
            <returns>A TriangulationSource object populated with points and triangle indices after reading the ITF from the given BinaryReader.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TriangulationSource.SaveItf(System.IO.Stream)">
            <summary>
            Saves the Triangulation to the binary ITF format.
            </summary>
            <param name="stream">The stream to save the triangulation to as ITF.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.TriangulationSource.Points">
            <summary>
            The collection of Points and numeric values from which the triangulation is created.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TriangulationSource.Triangles">
            <summary>
            The collection of triangle indices corresponding to the Points collection.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Triangulator.TriangulationStatusChanged">
            <summary>
            Raised when the status of an ongoing Triangulation has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.TriangulationStatusEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a TriangulationStatusEventArgs
            </summary>
            <param name="currentStatus">The current status of the load.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.TriangulationStatusEventArgs.CurrentStatus">
            <summary>
            The current status from 0 to 100 of the progressive triangulation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HalfEdge">
            <summary>
            A directed half-edge segment defined by two vertex codes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HalfEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            HalfEdge constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HalfEdge.B">
            <summary>
            B.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HalfEdge.E">
            <summary>
            resolution.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HalfEdgeSet">
            <summary>
            Represents an unordered set of half-edges.
            </summary>
            <remarks>
            The set may not contain two half-edges which form together form a full edge, and it is an
            error to attempt to insert such a pair.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.HalfEdgeSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HalfEdgeSet.Add(Infragistics.Controls.Charts.HalfEdge)">
            <summary>
            Adds a HalfEdge to the set.
            </summary>
            <param name="edge">The HalfEdge to add.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HalfEdgeSet.Remove(Infragistics.Controls.Charts.HalfEdge)">
            <summary>
            Removes a HalfEdge from the set.
            </summary>
            <param name="edge">The HalfEdge to remove from the set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HalfEdgeSet.Clear">
            <summary>
            Clears the set.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HalfEdgeSet.Contains(Infragistics.Controls.Charts.HalfEdge)">
            <summary>
            Determines whether or not the given HalfEdge exists in the set.
            </summary>
            <param name="edge">The HalfEdge under observation.</param>
            <returns>True if the set contains the HalfEdge, otherwise False.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.HalfEdgeSet.Count">
            <summary>
            Count of HalfEdges in the set.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.TriangulationSourcePointRecord">
            <summary>
            Class representing a single point and its associated value in a triangulation source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TriangulationSourcePointRecord.Point">
            <summary>
            The point.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TriangulationSourcePointRecord.Value">
            <summary>
            The numeric value associated with the point.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.IMapRenderDeferralHandler">
            <summary>
            Interface for handling deferred rendering under Infragistics map controls.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.IMapRenderDeferralHandler.Register(Infragistics.Portable.Components.DependencyObject,System.Action{System.Boolean})">
            <summary>
            Registers the given DependencyObject for deferred rendering.
            </summary>
            <param name="source">The DependencyObject to register for deferred rendering.</param>
            <param name="refresh">An action to take each time a refresh is called for.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.IMapRenderDeferralHandler.UnRegister(Infragistics.Portable.Components.DependencyObject)">
            <summary>
            Unregisters the given DependencyObject for deferred rendering.
            </summary>
            <param name="source">The DependencyObject to unregister for deferred rendering.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.IMapRenderDeferralHandler.DeferredRefresh">
            <summary>
            Call for a deferred refresh.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.XamMultiScaleImage">
            <summary>
            The Infragistics MultiScaleImage control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleImage.#ctor">
            <summary>
            XamMultiScaleImage constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.SourceProperty">
            <summary>
            Identifies the Source dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportOriginProperty">
            <summary>
            Identifies the ViewportOrigin dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportWidthProperty">
            <summary>
            Identifies the ViewportWidth dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.UseSpringsProperty">
            <summary>
            Identifies the UseSprings dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMultiScaleImage.SpringsEasingFunctionProperty">
            <summary>
            Identifies the SpringsEasingFunction dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMultiScaleImage.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Method invoked whenever a property value on this XamMultiScaleImage has been changed.
            </summary>
            <param name="ea">The PropertyChangedEventArgs in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.DeferralHandler">
            <summary>
            The deferral handler to use for deferred refreshes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.Source">
            <summary>
            The TileSource to use for tiles in this XamMultiScaleImage.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportOrigin">
            <summary>
            The origin point of the MultiScaleImage Viewport.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.ViewportWidth">
            <summary>
            The Width of the MultiScaleImage Viewport.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.UseSprings">
            <summary>
            Boolean indicating whether or not dampening should be used during pan operations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMultiScaleImage.SpringsEasingFunction">
            <summary>
            The easing function to use for dampening during pan operations.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMultiScaleImage.PropertyChanged">
            <summary>
            Event raised whenever a property value on this XamMultiScaleImage has been changed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.Pair`2">
            <summary>
            Represents an immutable pair of values.
            </summary>
            <typeparam name="T1">The type of the first value in the pair.</typeparam>
            <typeparam name="T2">The type of the second value in the pair.</typeparam>
        </member>
        <member name="T:Infragistics.Portable.Clipper">
            <summary>
            Modified Sutherland-Hodge clipping
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Clipper.#ctor(Infragistics.Portable.Rect,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="clip">Clip rectangle</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:Infragistics.Portable.Clipper.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="left">Left edge of clip rectangle or NaN.</param>
            <param name="bottom">Bottom edge of clip rectangle or NaN.</param>
            <param name="right">Right edge of clip rectangle or NaN.</param>
            <param name="top">Top edge of clip rectangle or NaN.</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:Infragistics.Portable.Clipper.Add(Infragistics.Portable.Point)">
            <summary>
            Adds a Point to the clipper.
            </summary>
            <param name="point">The Point to be considered in the clipping operation.</param>
        </member>
        <member name="P:Infragistics.Portable.Clipper.Target">
            <summary>
            Destination target for clipped points.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Clipper.IsClosed">
            <summary>
            Boolean value. True if the clipper is configured to perform closed-shape clipping, else false.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.EdgeClipper">
            <summary>
            Represents a clipping stage in the Sutherland-Hodge clipper.
            </summary>
            <remarks>
            EdgeClipper implements IList so that it can be transparently
            pipe to either another edge clipper or a "real" IList implementation.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.Add(Infragistics.Portable.Point)">
            <summary>
            Adds a point to the current edge clipper, resulting in zero, one or two
            points being piped to the desitnation IList.
            </summary>
            <param name="cur">Point to add to the clipping stage.</param>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.Clear">
            <summary>
            Flushes the edge clipping stage.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.IsInside(Infragistics.Portable.Point)">
            <summary>
            Gets the status of the point with respect to the current clipping stage's edge.
            </summary>
            <param name="pt">Point to test</param>
            <returns>True if the point is inside or on the edge, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.Intersection(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Gets the intersection of an edge with the current clipping stage's edge.
            </summary>
            <param name="b">Start of edge</param>
            <param name="e">End of edge</param>
            <returns>Intersection of edge with the current clipping stage's edge</returns>
        </member>
        <member name="P:Infragistics.Portable.EdgeClipper.Dst">
            <summary>
            Sets or gets the destination for the current edge clipper object.
            </summary>
            <remarks>
            Setting an edge clipper's destination resets the stage.
            </remarks>
        </member>
        <member name="T:Infragistics.Portable.LeftClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's left edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.BottomClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's bottom edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.RightClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's right edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.TopClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's top edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Flattener">
            <summary>
            Utility class for line flattening.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Spiral(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Flatten the specified Archimidean spiral curve with the maximum specified area error.
            </summary>
            <param name="startAngle">Curve start angle in radians.</param>
            <param name="startRadius">Curve start radius.</param>
            <param name="endAngle">Curve end angle in radians.</param>
            <param name="endRadius">Curve end radius.</param>
            <param name="error">Maximum error between approximation and spiral.</param>
            <returns>List of interpolation parameters in the range [0, 1].</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Flatten(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="count">Number of points in line.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="resolution">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Flatten(System.Collections.Generic.IList{System.Int32},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Flatten(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="indices">The indices of the points being flattened.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.FastFlatten(System.Collections.Generic.List{System.Int32},System.Double[],System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Performance optimized flattening routine.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Spline(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Returns the points for a spline with the given key points.
            </summary>
            <param name="count">The number of source points.</param>
            <param name="X">Delegate to find the X-coordinate of a key point at a given index.</param>
            <param name="Y">Delegate to find the Y-coordinate of a key point at a given index.</param>
            <returns>The points for a spline with the given key points.</returns>
        </member>
        <member name="T:Infragistics.Portable.FlattenerSettings">
            <summary>
            A singleton set of settings for the flattener to resolve various edge cases.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FlattenerSettings.Instance">
            <summary>
            Gets the settings instance.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FlattenerSettings.ChunkingAmount">
            <summary>
            Gets or sets the chunking amount to use when flattening visuals.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.GeometryUtil">
            <summary>
            Utility class for geometry operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.SimplifyAngle(System.Double)">
            <summary>
            Simplifies an angle to a value between 0 and 360.
            </summary>
            <param name="angle">The angle to simplified.</param>
            <returns>The angle, simplified to a value between 0 and 360.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.AngleFromSlope(System.Double)">
            <summary>
            Gets the angle of a line given its slope.
            </summary>
            <param name="slope">The slope.</param>
            <returns>The angle of a line given its slope.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.Slope(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Calculates the slope of a line given two known points.
            </summary>
            <param name="point1">One point on the line.</param>
            <param name="point2">A second point on the line.</param>
            <returns>The slope of the line containing the points point1 and point2.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.Eccentricity(Infragistics.Portable.Rect)">
            <summary>
            Calculates the eccentricity of an ellipse with the given bounds.
            </summary>
            <param name="bounds">The bounding rectangle for the ellipse.</param>
            <returns>The eccentricity of an ellipse with the given bounds.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.PointOnEllipse(System.Double,System.Double,Infragistics.Portable.Point,System.Double,System.Double)">
            <summary>
            Gets a point on an ellipse at the given angle and extent.
            </summary>
            <param name="theta">The angle at which to find a point on the ellipse, expressed in radians.</param>
            <param name="eccentricity">The eccentricity of the ellipse.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="halfHeight">Half the height of the ellipse.</param>
            <param name="extent">Location of the point relative to the center and the surface of the ellipse, expressed as a value between 0 and 1, with 0 being the center and 1 being on the surface of the ellipse.</param>
            <returns>A point on the ellipse at the given angle and extent.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.FindCenter(System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Calculates the center of the current chart.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="exploded">Whether or not the point is exploded.</param>
            <param name="angle">Angle of the slice.</param>
            <param name="radius">Radius value.</param>
            <returns>The center point of the chart.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.FindRadialPoint(Infragistics.Portable.Point,System.Double,System.Double)">
            <summary>
            Finds a point in Cartesian coordinates using radial parameters.
            </summary>
            <param name="center">The center of a circle to find a point on the border of.</param>
            <param name="angle">The angle at which to find a point.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>The point on the border of a circle with the given center and radius, at the specified angle.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.PointAtDistance(Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double)">
            <summary>
            Finds the point between two points that is at a specified distance from the first.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="distance">The distance from the first point.</param>
            <returns>The Point at the specified location.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetSegmentLength(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Gets the length of the segment specified by the two points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The length of the segment.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetCenterFromArcSegment(Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets center from arc segment 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetAngleTo(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Gets angle to a point from the specified center point
            </summary>
            <param name="center"></param>
            <param name="toPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetCircleIntersection(Infragistics.Portable.Point,Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double)">
            <summary>
            Gets points intersecting a line and a circle with a given center and radius
            </summary>
        </member>
        <member name="T:Infragistics.Portable.PathFigureUtil">
            <summary>
            Utilty methods for PathFigures.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.PathFigureUtil.Duplicate(Infragistics.Portable.Graphics.Media.PathFigureCollection)">
            <summary>
            Duplicates the specified path figure collection.
            </summary>
            <param name="pathFigureCollection">The path figure collection.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.PathFigureUtil.Duplicate(Infragistics.Portable.Graphics.Media.PathFigure)">
            <summary>
            Creates a duplicate of the current PathFigure object.
            </summary>
            <param name="pathFigure">The current PathFigure object.</param>
            <returns>A new PathFigure</returns>
        </member>
        <member name="T:Infragistics.Controls.PointCollectionUtil">
            <summary>
            General purpose utility methods for collections of points.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.FlattenTo(System.Collections.Generic.IList{Infragistics.Portable.Point},System.Collections.Generic.IList{Infragistics.Portable.Point},System.Double)">
            <summary>
            Creates a simplified version of the the open simplex or polyline formed by the current points
            by removing internal points with the specified error tolerance.
            </summary>
            <param name="points">Polygon or polyline to flatten.</param>
            <param name="list">Destination to which the flattened polygon or polyline will be written (if null, a new one will be created)</param>
            <param name="E">Maximum flattenning error.</param>
            <returns>Point collection containing the flattened polygon or polyline.</returns>
            <remarks>
            The first and last point of the currents are always part of the returned points
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Gets the axis-aligned bounding box for the cloud of points.
            </summary>
            <param name="points"></param>
            <returns>axis-aligned bounding rectangle or Rect.Empty</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Infragistics.Portable.Point}})">
            <summary>
            Returns a Rect representing the bounds of all the points in the given list.
            </summary>
            <param name="points">A list of list of points.</param>
            <returns>A Rect representing the bounds of all given points.</returns>
            <remarks>The nested lists of points data structure corresponds to that which is used in the Shapefile format and other geospatial data sources.</remarks>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IList{Infragistics.Portable.Point})">
            <summary>
            Gets the bounding rectangle containing all of the given Points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given Points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.Point}})">
            <summary>
            Gets the bounding rectangle containing all of the given points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.List{Infragistics.Portable.PointCollection})">
            <summary>
            Gets the bounding rectangle containing all of the given points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ClipTo(System.Collections.Generic.IList{Infragistics.Portable.Point},System.Collections.Generic.IList{Infragistics.Portable.Point},Infragistics.Portable.Clipper)">
            <summary>
            Clips the given points using the given Clipper.
            </summary>
            <param name="points">The points to clip using the given Clipper.</param>
            <param name="list">Not used.</param>
            <param name="clipper">The Clipper to use when clipping the given points to the target bounds.</param>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetCentroid(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Gets the centroid of the current cloud of points
            </summary>
            <param name="points">Cloud of points for which to calculate the centroid.</param>
            <returns>Centroid of the specified cloud of points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointCollection(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Converts the given list of points to a PointCollection object.
            </summary>
            <param name="points">The points to copy to the resulting PointCollection.</param>
            <returns>A PointCollection containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointList(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Converts an IEnumerable of Points to a List of Points.
            </summary>
            <param name="points">The IEnumerable of Points to convert.</param>
            <returns>A List of Points constructed from the given IEnumerable of Points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointCollections(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.Point}})">
            <summary>
            Converts a List of Lists of Points to a List of PointCollections.
            </summary>
            <param name="points">The List of Lists of Points to convert.</param>
            <returns>A List of PointCollections constructed from the given List of List of Points.</returns>
        </member>
        <member name="T:Infragistics.Portable.PolygonUtil">
            <summary>
            Provides utility methods for working with polygons or list of points
            </summary>
        </member>
        <member name="M:Infragistics.Portable.PolygonUtil.PolygonContainsPoint(System.Collections.Generic.IList{Infragistics.Portable.Point},Infragistics.Portable.Point)">
            <summary>
            Checks if a polygon contains specified point
            </summary>
        </member>
        <member name="T:Infragistics.PolySimplification">
            <summary>
            Utility class for polygon simpliciation.
            </summary>
        </member>
        <member name="M:Infragistics.PolySimplification.VertexReduction(System.Tuple{System.Double[],System.Double[]},System.Double)">
            <summary>
            Simple vertex reduction algorithm.
            Complexity: O(n)
            
            Summary:
            Include P0 in the result, and set R = P0. Iterate through subsequent points P1,P2,... until distance(PN, R) > tolerance.
            Include PN in the result, and set R = PN. Continue iterating in this fashion until there are no more points to consider for inclusion.
            
            </summary>
            <param name="points">Input list of points</param>
            <param name="tolerance">The minimum distance allowed between adjacent points</param>
            <returns>List of accepted points</returns>
        </member>
        <member name="M:Infragistics.PolySimplification.SquareDistance(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Returns the square of the distance between p1 and p2.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.SmartPlaceableWrapper`1">
            <summary>
            ISmartPlaceable wrapper class for a FrameworkElement.
            For use with the SmartPlacer class.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ISmartPlaceable">
            <summary>
            Interface for objects placed by a smart placer object.
            </summary>
            <remarks>
            Although there is a clear intent to SmartPosition values, implementing classes
            are free to interpret the values as they wish. The only restriction being that
            the position parameter be interpreted coherently: the bounds set by calling
            SetPosition() should be identical to those returned by calling GetPosition()
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.ISmartPlaceable.GetSmartPositions">
            <summary>
            Gets an array of valid positions for the current object. Objects can individually
            place restrictions on where they can be placed, although in reality it's more
            likely that they'll just return a static array.
            
            The order of the valid positions has some significance, in that although the
            placer will choose the best overall position, it will stop searching as
            soon as it finds an ideal one. The upshot of all of this is that you should
            return an array sorted in order of preferred placement.
            </summary>
            <returns>Array of valid smart positions for the current object.</returns>
        </member>
        <member name="M:Infragistics.Portable.ISmartPlaceable.GetSmartBounds(Infragistics.Portable.SmartPosition)">
            <summary>
            Gets the bounds of the current object if it were placed at the specified position.
            </summary>
            <param name="position">Smart position for bounds.</param>
            <returns>Bounds for the current object</returns>
        </member>
        <member name="P:Infragistics.Portable.ISmartPlaceable.SmartPosition">
            <summary>
            Gets or sets the position of the current object.
            </summary>
            <remarks>
            After the smart position is set, the current object's
            bounds are assumed to be that returned from GetSmartBounds() if called with the same position.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.ISmartPlaceable.Opacity">
            <summary>
            Sets or gets the opacity of the current object.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.#ctor">
            <summary>
            SmartPlaceableWrapper constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.GetSmartPositions">
            <summary>
            Gets the array of SmartPositions for this SmartPlaceableWrapper.
            </summary>
            <returns>The array of SmartPositions for this SmartPlaceableWrapper.</returns>
        </member>
        <member name="F:Infragistics.Portable.SmartPlaceableWrapper`1.smartPositionDefault">
            <summary>
            Dummy array consisting of the default SmartPositions.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPlaceableWrapper`1.smartPositions">
            <summary>
            SmartPositions in order of preference.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.GetSmartBounds(Infragistics.Portable.SmartPosition)">
            <summary>
            Gets the smart placement bounds for the SmartPlaceableWrapper using the specified SmartPosition.
            </summary>
            <param name="position">A SmartPosition value indicating how to place the SmartPlaceableWrapper.</param>
            <returns>A Rect representing the calculated bounds for the SmartPlaceableWrapper at the given SmartPosition.</returns>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.GetOffset(Infragistics.Portable.SmartPosition,System.Double,System.Double)">
            <summary>
            Returns the offset (from OriginalLocation) representing a particular SmartPosition.
            </summary>
            <param name="position">A SmartPosition.</param>
            <param name="w">The width of the element being positioned.</param>
            <param name="h">The height of the element being positioned.</param>
            <returns>A Point representing the offset from OriginalLocation.</returns>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.NoWiggle">
            <summary>
            If true, no attempt will be made to shift the position of the smart placeable element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.Element">
            <summary>
            Gets or sets the associated FrameworkElement.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.ElementLocationResult">
            <summary>
            The resulting location for Element after smart placement.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.OriginalLocation">
            <summary>
            Gets or sets the original location for Element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.Opacity">
            <summary>
            The Opacity of the underlying element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.SmartPosition">
            <summary>
            The SmartPosition being used for placement of the SmartPlaceableWrapper.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.SmartPosition">
            <summary>
            Describes available positions for smart label placement with respect to the notional rectangle's
            origin
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.LeftTop">
            <summary>
            Specifies left top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.CenterTop">
            <summary>
            Specifies center top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.RightTop">
            <summary>
            Specifies right top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.LeftCenter">
            <summary>
            Specifies left center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.CenterCenter">
            <summary>
            Specifies center center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.RightCenter">
            <summary>
            Specifies right center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.LeftBottom">
            <summary>
            Specifies left bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.CenterBottom">
            <summary>
            Specifies center bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.RightBottom">
            <summary>
            Specifies right bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.SmartPlacer">
            <summary>
            Manages the position for each object in a set of managed SmartPositions in
            an attempt to minimise overlap.
            </summary>
            <remarks>
            Collision avoidance uses a greedy algorithm running in O(n^2) with O(n) storage.
            Although there are no known algorithms running in less time than this, simulated
            annealing may produce slightly better results with comparable execution time.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.SmartPlacer.#ctor">
            <summary>
            Creates a new SmartPlacer with the default configuration.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlacer.Place(Infragistics.Portable.ISmartPlaceable)">
            <summary>
            Place the object with respect to currently placed object.
            Calling this method causes the object to be immediately updated, but has no effect on previously
            placed objects.
            
            Placeables which cannot be placed within the placement bounds or 
            without overlapping previously placed objects are hidden
            </summary>
            <param name="smartPlaceable">Object to place.</param>
        </member>
        <member name="P:Infragistics.Portable.SmartPlacer.Bounds">
            <summary>
            Sets or gets the placement bounds for this smart placer. Setting the
            placement bounds has no effect on previously placed objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlacer.Overlap">
            <summary>
            Sets or gets the maximum permissible placed overlap expressed as a
            percentage [0, 1] of each placeable's area. Setting the
            placement overlap has no effect on previously placed objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlacer.Fade">
            <summary>
            Sets or gets the fade exponent for ISmartPlaceables which exceed
            the current overlap. Setting the
            placement fade has no effect on previously placed objects.
            </summary>
        </member>
    </members>
</doc>
